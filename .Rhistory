for(i in 1:N){
s[i] <- 2
}
}"
data <- read.csv("F:/rtd_analysis/Individuals resightings.csv")
gbi <- get_group_by_individual(data[,c(3,2)], data_format = "individuals")
gbi <- gbi[,colSums(gbi) >= 3]
gbi <- gbi[rowSums(gbi) > 0,]
data_list <- list(
gbi = gbi,
N = ncol(gbi),
G = nrow(gbi)
)
fit <- run.jags(multivariate_bernoulli,
data = data_list,
monitor = c("mu","iSigma"),
modules = "glm")
multivariate_bernoulli <- "model{
for(g in 1:G){
for(i in 1:N){
gbi[g,i] ~ dbern(p[g,i])
}
logit(p[g,1:N]) ~ dmnorm(mu[1:N],iSigma[1:N,1:N])
}
for(i in 1:N){
mu[i] ~ dnorm(mu_pop,tau)
}
tau <- pow(sigma,-2)
sigma ~ dt(0,2,3) T(0,)
mu_pop ~ dnorm(0,1)
iSigma[1:N,1:N] ~ dscaled.wishart(s[1:N],2)
for(i in 1:N){
s[i] <- 2
}
}"
data <- read.csv("F:/rtd_analysis/Individuals resightings.csv")
gbi <- get_group_by_individual(data[,c(3,2)], data_format = "individuals")
gbi <- gbi[,colSums(gbi) >= 3]
gbi <- gbi[rowSums(gbi) > 0,]
data_list <- list(
gbi = gbi,
N = ncol(gbi),
G = nrow(gbi)
)
fit <- run.jags(multivariate_bernoulli,
data = data_list,
monitor = c("mu","iSigma"),
modules = "glm")
multivariate_bernoulli <- "model{
for(g in 1:G){
for(i in 1:N){
gbi[g,i] ~ dbern(p[g,i])
logit(p[g,i]) <- z[g,i]
}
z[g,1:N] ~ dmnorm(mu[1:N],iSigma[1:N,1:N])
}
for(i in 1:N){
mu[i] ~ dnorm(mu_pop,tau)
}
tau <- pow(sigma,-2)
sigma ~ dt(0,2,3) T(0,)
mu_pop ~ dnorm(0,1)
iSigma[1:N,1:N] ~ dscaled.wishart(s[1:N],2)
for(i in 1:N){
s[i] <- 2
}
}"
data <- read.csv("F:/rtd_analysis/Individuals resightings.csv")
gbi <- get_group_by_individual(data[,c(3,2)], data_format = "individuals")
gbi <- gbi[,colSums(gbi) >= 3]
gbi <- gbi[rowSums(gbi) > 0,]
data_list <- list(
gbi = gbi,
N = ncol(gbi),
G = nrow(gbi)
)
fit <- run.jags(multivariate_bernoulli,
data = data_list,
monitor = c("mu","iSigma"),
modules = "glm")
multivariate_threshold <- "model{
for(g in 1:G){
for(i in 1:N){
gbi[g,i] ~ dinterval(z[g,i],0.5)
}
z[g,1:N] ~ dmnorm(mu[1:N],iSigma[1:N,1:N])
}
for(i in 1:N){
mu[i] ~ dnorm(mu_pop,tau)
}
tau <- pow(sigma,-2)
sigma ~ dt(0,2,3) T(0,)
mu_pop ~ dnorm(0,1)
iSigma[1:N,1:N] ~ dscaled.wishart(s[1:N],2)
for(i in 1:N){
s[i] <- 2
}
}"
data <- read.csv("F:/rtd_analysis/Individuals resightings.csv")
gbi <- get_group_by_individual(data[,c(3,2)], data_format = "individuals")
gbi <- gbi[,colSums(gbi) >= 3]
gbi <- gbi[rowSums(gbi) > 0,]
data_list <- list(
gbi = gbi,
N = ncol(gbi),
G = nrow(gbi)
)
fit <- run.jags(multivariate_bernoulli,
data = data_list,
monitor = c("mu","iSigma"),
modules = "glm")
fit <- run.jags(multivariate_threshold,
data = data_list,
monitor = c("mu","iSigma"),
modules = "glm")
fit <- run.jags(multivariate_threshold,
data = data_list,
monitor = c("mu","iSigma"),
modules = "glm",
inits = list(z = ifelse(gbi == 0, -1, 1)))
multivariate_threshold <- "model{
for(g in 1:G){
for(i in 1:N){
gbi[g,i] ~ dinterval(z[g,i],0)
}
z[g,1:N] ~ dmnorm(mu[1:N],iSigma[1:N,1:N])
}
for(i in 1:N){
mu[i] ~ dnorm(mu_pop,tau)
}
tau <- pow(sigma,-2)
sigma ~ dt(0,2,3) T(0,)
mu_pop ~ dnorm(0,1)
iSigma[1:N,1:N] ~ dscaled.wishart(s[1:N],2)
for(i in 1:N){
s[i] <- 2
}
}"
data <- read.csv("F:/rtd_analysis/Individuals resightings.csv")
gbi <- get_group_by_individual(data[,c(3,2)], data_format = "individuals")
gbi <- gbi[,colSums(gbi) >= 3]
gbi <- gbi[rowSums(gbi) > 0,]
data_list <- list(
gbi = gbi,
N = ncol(gbi),
G = nrow(gbi)
)
fit <- run.jags(multivariate_threshold,
data = data_list,
monitor = c("mu","iSigma"),
modules = "glm",
inits = list(z = ifelse(gbi == 0, -1, 1)))
gc()
bayes_SRI <- array(0, dim = c(nrow(fit_MCMC),ncol(gbi),ncol(gbi)))
fit_MCMC <- do.call(rbind,fit$mcmc)
bayes_SRI <- array(0, dim = c(nrow(fit_MCMC),ncol(gbi),ncol(gbi)))
r <- 1
iS <- fit_MCMC[r,substr(colnames(fit_MCMC),1,2) = ="iS"]
Sigma <- solve(iS)
iS <- fit_MCMC[r,substr(colnames(fit_MCMC),1,2) == "iS"]
Sigma <- solve(iS)
mu <- fit_MCMC[r,substr(colnames(fit_MCMC),1,1) == "m"]
mu
is
iS
iS <- matrix(fit_MCMC[r,substr(colnames(fit_MCMC),1,2) == "iS"],nrow=ncol(gbi))
iS
Sigma <- solve(iS)
mu <- fit_MCMC[r,substr(colnames(fit_MCMC),1,1) == "m"]
for(i in 1:(ncol(gbi)-1)){
for(j in (i+1):ncol(gbi)){
pboth <- pmvnorm(lower = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
pneither <- pmvnorm(upper = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
peither <- 1-pneither
bayes_SRI[r,i,j] <- bayes_SRI[r,j,i] <- pboth/peither
}
}
require(mvtnorm)
for(i in 1:(ncol(gbi)-1)){
for(j in (i+1):ncol(gbi)){
pboth <- pmvnorm(lower = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
pneither <- pmvnorm(upper = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
peither <- 1-pneither
bayes_SRI[r,i,j] <- bayes_SRI[r,j,i] <- pboth/peither
}
}
bayes_SRI[1,,]
bayes_SRI <- array(0, dim = c(nrow(fit_MCMC),ncol(gbi),ncol(gbi)))
for(r in 1:nrow(fit_MCMC)){
iS <- matrix(fit_MCMC[r,substr(colnames(fit_MCMC),1,2) == "iS"],nrow=ncol(gbi))
Sigma <- solve(iS)
mu <- fit_MCMC[r,substr(colnames(fit_MCMC),1,1) == "m"]
for(i in 1:(ncol(gbi)-1)){
for(j in (i+1):ncol(gbi)){
pboth <- pmvnorm(lower = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
pneither <- pmvnorm(upper = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
peither <- 1-pneither
bayes_SRI[r,i,j] <- bayes_SRI[r,j,i] <- pboth/peither
}
}
}
r
for(r in 1:nrow(fit_MCMC)){
print(r)
iS <- matrix(fit_MCMC[r,substr(colnames(fit_MCMC),1,2) == "iS"],nrow=ncol(gbi))
Sigma <- solve(iS)
mu <- fit_MCMC[r,substr(colnames(fit_MCMC),1,1) == "m"]
for(i in 1:(ncol(gbi)-1)){
for(j in (i+1):ncol(gbi)){
pboth <- pmvnorm(lower = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
pneither <- pmvnorm(upper = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
peither <- 1-pneither
bayes_SRI[r,i,j] <- bayes_SRI[r,j,i] <- pboth/peither
}
}
}
bayes_SRI <- array(0, dim = c(nrow(fit_MCMC),ncol(gbi),ncol(gbi)))
for(r in 1:nrow(fit_MCMC)){
print(r)
iS <- matrix(fit_MCMC[r,substr(colnames(fit_MCMC),1,2) == "iS"],nrow=ncol(gbi))
Sigma <- solve(iS)
mu <- fit_MCMC[r,substr(colnames(fit_MCMC),1,1) == "m"]
for(i in 1:(ncol(gbi)-1)){
for(j in (i+1):ncol(gbi)){
pboth <- pmvnorm(lower = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
pneither <- pmvnorm(upper = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
peither <- 1-pneither
bayes_SRI[r,i,j] <- bayes_SRI[r,j,i] <- pboth/peither
}
}
hist(bayes_SRI[,1,2])
}
bayes_SRI <- array(0, dim = c(nrow(fit_MCMC),ncol(gbi),ncol(gbi)))
for(r in 1:nrow(fit_MCMC)){
print(r)
iS <- matrix(fit_MCMC[r,substr(colnames(fit_MCMC),1,2) == "iS"],nrow=ncol(gbi))
Sigma <- solve(iS)
mu <- fit_MCMC[r,substr(colnames(fit_MCMC),1,1) == "m"]
for(i in 1:(ncol(gbi)-1)){
for(j in (i+1):ncol(gbi)){
pboth <- pmvnorm(lower = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
pneither <- pmvnorm(upper = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
peither <- 1-pneither
bayes_SRI[r,i,j] <- bayes_SRI[r,j,i] <- pboth/peither
}
}
hist(bayes_SRI[1:i,1,2])
}
bayes_SRI <- array(0, dim = c(nrow(fit_MCMC),ncol(gbi),ncol(gbi)))
for(r in 1:nrow(fit_MCMC)){
print(r)
iS <- matrix(fit_MCMC[r,substr(colnames(fit_MCMC),1,2) == "iS"],nrow=ncol(gbi))
Sigma <- solve(iS)
mu <- fit_MCMC[r,substr(colnames(fit_MCMC),1,1) == "m"]
for(i in 1:(ncol(gbi)-1)){
for(j in (i+1):ncol(gbi)){
pboth <- pmvnorm(lower = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
pneither <- pmvnorm(upper = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
peither <- 1-pneither
bayes_SRI[r,i,j] <- bayes_SRI[r,j,i] <- pboth/peither
}
}
hist(bayes_SRI[1:r,1,2])
}
thin <- seq(100,nrow(fit_MCMC),100)
thin
thin <- seq(20,nrow(fit_MCMC),20)
thin
fit_MCMC <- do.call(rbind,fit$mcmc)
bayes_SRI <- array(0, dim = c(nrow(fit_MCMC),ncol(gbi),ncol(gbi)))
thin <- seq(20,nrow(fit_MCMC),20)
bayes_SRI <- array(0, dim = c(length(thin),ncol(gbi),ncol(gbi)))
for(t in length(thin)){
r <- thin[t]
print(r)
iS <- matrix(fit_MCMC[r,substr(colnames(fit_MCMC),1,2) == "iS"],nrow=ncol(gbi))
Sigma <- solve(iS)
mu <- fit_MCMC[r,substr(colnames(fit_MCMC),1,1) == "m"]
for(i in 1:(ncol(gbi)-1)){
for(j in (i+1):ncol(gbi)){
pboth <- pmvnorm(lower = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
pneither <- pmvnorm(upper = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
peither <- 1-pneither
bayes_SRI[t,i,j] <- bayes_SRI[r,j,i] <- pboth/peither
}
}
hist(bayes_SRI[1:t,1,2])
}
t
r <- thin[t]
t
length(thin)
thin <- seq(20,nrow(fit_MCMC),20)
bayes_SRI <- array(0, dim = c(length(thin),ncol(gbi),ncol(gbi)))
for(t in 1:length(thin)){
r <- thin[t]
print(r)
iS <- matrix(fit_MCMC[r,substr(colnames(fit_MCMC),1,2) == "iS"],nrow=ncol(gbi))
Sigma <- solve(iS)
mu <- fit_MCMC[r,substr(colnames(fit_MCMC),1,1) == "m"]
for(i in 1:(ncol(gbi)-1)){
for(j in (i+1):ncol(gbi)){
pboth <- pmvnorm(lower = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
pneither <- pmvnorm(upper = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
peither <- 1-pneither
bayes_SRI[t,i,j] <- bayes_SRI[r,j,i] <- pboth/peither
}
}
hist(bayes_SRI[1:t,1,2])
}
fit_MCMC <- do.call(rbind,fit$mcmc)
bayes_SRI <- array(0, dim = c(nrow(fit_MCMC),ncol(gbi),ncol(gbi)))
thin <- seq(20,nrow(fit_MCMC),20)
bayes_SRI <- array(0, dim = c(length(thin),ncol(gbi),ncol(gbi)))
for(t in 1:length(thin)){
r <- thin[t]
print(r)
iS <- matrix(fit_MCMC[r,substr(colnames(fit_MCMC),1,2) == "iS"],nrow=ncol(gbi))
Sigma <- solve(iS)
mu <- fit_MCMC[r,substr(colnames(fit_MCMC),1,1) == "m"]
for(i in 1:(ncol(gbi)-1)){
for(j in (i+1):ncol(gbi)){
pboth <- pmvnorm(lower = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
pneither <- pmvnorm(upper = c(0,0), mean = mu[c(i,j)], sigma = Sigma[c(i,j),c(i,j)])[1]
peither <- 1-pneither
bayes_SRI[t,i,j] <- bayes_SRI[t,j,i] <- pboth/peither
}
}
hist(bayes_SRI[1:t,1,2])
}
bootstrap_SRI <- replicate(1000, {
print(runif(1))
gbi.b <- gbi[sample(nrow(gbi),rep=T),]
x <- get_numerator(gbi.b,data_format="GBI",return="matrix")
d <- get_denominator(gbi.b,data_format="GBI",return="matrix")
sri <- x/d
diag(sri) <- 0
sri[is.na(sri)] <- 0
sri[is.infinite(sri)] <- 0
sri
})
dim(bootstrap_SRI)
t(bootstrap_SRI)
?replicate
hist(bootstrap_SRI[,1,2])
hist(bootstrap_SRI[1,2,])
x <- get_numerator(gbi,data_format="GBI",return="matrix")
d <- get_denominator(gbi,data_format="GBI",return="matrix")
a <- x + 1
b <- (d-x) + 1
sri <- matrix(rbeta(n = length(x), shape1 = a, shape2 = b), ncol = ncol(x))
sri
beta_SRI <- replicate(1000, {
x <- get_numerator(gbi,data_format="GBI",return="matrix")
d <- get_denominator(gbi,data_format="GBI",return="matrix")
a <- x + 1
b <- (d-x) + 1
sri <- matrix(rbeta(n = length(x), shape1 = a, shape2 = b), ncol = ncol(x))
sri[upper.tri(sri)] <- t(sri)[upper.tri(sri)]
diag(sri) <- 0
sri
})
hist(beta_SRI[1,2,])
hist(beta_SRI[1,3,])
hist(bootstrap_SRI[1,2,])
hist(beta_SRI[1,2,])
hist(bootstrap_SRI[1,2,])
obs_SRI <- get_network(gbi)
obs_SRI
plot(obs_SRI ~ apply(beta_SRI,c(1,2), mean))
plot(obs_SRI ~ apply(bootstrap_SRI,c(1,2), mean))
plot(obs_SRI ~ apply(bayes_SRI,c(2,3), mean))
abline(a = 0, b = 1)
plot(obs_SRI ~ apply(bootstrap_SRI,c(1,2), mean))
abline(a = 0, b = 1)
hist(bootstrap_SRI[1,2,])
sd(bootstrap_SRI[1,2,])
sd(beta_SRI[1,2,])
sd(bayes_SRI[1,2,])
sd(bayes_SRI[,1,2])
hub_model <- "model{
for(g in 1:G){
for(i in 1:N){
gbi[g,i] ~ dbera(A[leader[g],i])
}
leader[g] ~ dcat(p[1:N])
}
p[1:N] ~ ddirch(prior_p[1:N])
for(i in 1:N){prior_p[i] <- 1}
for(i in 1:(N-1)){
for(j in (i+1):N){
A[i,j] <- A[j,i]
A[j,i] ~ dunif(0,1)
}
}
for(i in 1:N){
A[i,i] <- 1
}
}"
data <- read.csv("F:/rtd_analysis/Individuals resightings.csv")
gbi <- get_group_by_individual(data[,c(3,2)], data_format = "individuals")
gbi <- gbi[,colSums(gbi) >= 3]
gbi <- gbi[rowSums(gbi) > 0,]
data_list <- list(
gbi = gbi,
N = ncol(gbi),
G = nrow(gbi)
)
fit <- run.jags(hub_model,
data = data_list,
monitor = c("A","p"))
hub_model <- "model{
for(g in 1:G){
for(i in 1:N){
gbi[g,i] ~ dbern(A[leader[g],i])
}
leader[g] ~ dcat(p[1:N])
}
p[1:N] ~ ddirch(prior_p[1:N])
for(i in 1:N){prior_p[i] <- 1}
for(i in 1:(N-1)){
for(j in (i+1):N){
A[i,j] <- A[j,i]
A[j,i] ~ dunif(0,1)
}
}
for(i in 1:N){
A[i,i] <- 1
}
}"
fit <- run.jags(hub_model,
data = data_list,
monitor = c("A","p"))
?igraph::modularity
?stats::cutree
network <- aninet::srkw_codetection
m <- network
graph = igraph::graph.adjacency(m, mode = "undirected", weighted = T)
graph
m.dist = stats::as.dist(1 - m)
clustering = stats::hclust(m.dist, method = method)
method = "average"
clustering = stats::hclust(m.dist, method = method)
cp = stats::cophenetic(clustering)
ccc = stats::cor(cp, m.dist)
membership <- stats::cutree(clustering, k = 1:ncol(m))
modularity <- apply(membership, 1, function(z){
igraph::modularity(graph, z, weights = E(graph)$weight)
})
modularity <- apply(membership, 1, function(z){
igraph::modularity(graph, z, weights = igraph::E(graph)$weight)
})
modularity
membership[,1]
membership[,2]
membership[,3]
membership[,4]
membership[,5]
membership[,6]
m <- network
graph = igraph::graph.adjacency(m, mode = "undirected", weighted = T)
m.dist = stats::as.dist(1 - m)
clustering = stats::hclust(m.dist, method = method)
cp = stats::cophenetic(clustering)
ccc = stats::cor(cp, m.dist)
membership <- stats::cutree(clustering, k = 1:ncol(m))
modularity <- apply(membership, 1, function(z){
igraph::modularity(graph, z, weights = igraph::E(graph)$weight)
})
modularity
best_clusters = stats::cutree(clustering, k = which.max(modularity))
height = 1 - cuts
m <- network
graph = igraph::graph.adjacency(m, mode = "undirected", weighted = T)
m.dist = stats::as.dist(1 - m)
clustering = stats::hclust(m.dist, method = method)
clustering$height <- round(clustering$height, 6)
cp = stats::cophenetic(clustering)
ccc = stats::cor(cp, m.dist)
cuts = clustering$height
cuts
plot(cuts)
modularity <- apply(membership, 1, function(z){
modularity(graph, membership = z, weights = igraph::E(g)$weight)
})
modularity <- apply(membership, 1, function(z){
igraph::modularity(graph, membership = z, weights = igraph::E(g)$weight)
})
modularity <- apply(membership, 1, function(z){
igraph::modularity(graph, membership = z, weights = igraph::E(graph)$weight)
})
modularity
plot(modularity)
association_hclust <- function(network, method = "average"){
m <- network
graph = igraph::graph.adjacency(m, mode = "undirected", weighted = T)
m.dist = stats::as.dist(1 - m)
clustering = stats::hclust(m.dist, method = method)
clustering$height <- round(clustering$height, 6)
cp = stats::cophenetic(clustering)
ccc = stats::cor(cp, m.dist)
cuts = clustering$height
cuts = unique(cuts)
membership <- cutree(clustering, h = cuts)
modularity <- apply(membership, 1, function(z){
igraph::modularity(graph, membership = z, weights = igraph::E(graph)$weight)
})
maximum_modularity = max(modularity)
best_clusters = stats::cutree(clustering, h = cuts[which.max(modularity)])
height = 1 - cuts
list(modularity = maximum_modularity, CCC = ccc, membership = best_clusters, tree = clustering, cuts = data.frame(AI = height, Mod = modularity), merge = clustering$merge)
}
