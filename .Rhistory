require(aninet)
require(asnipe)
require(ergm)
require(ergm.count)
require(latentnet)
require(vegan)
contact_rate <- srkw_contact/srkw_sampling #rate of physical contacts
srkw_strength <- colSums(contact_rate) #individual strength centrality
srkw_strength <- as.numeric(scale(srkw_strength)) # scale the strengths to have mean 0 and SD 1
m1 <- lm(srkw_strength ~ age, data = srkw_attributes) # fit the linear model
strength_t <- summary(m1)$coefficients[2,3] #save the t-value
t_perm <- NA
for(i in 1:1000){
strength_perm <- sample(srkw_strength) #randomize the strength
m1.perm <- lm(strength_perm ~ age, data = srkw_attributes)
t_perm[i] <- summary(m1.perm)$coefficients[2,3]
}
hist(t_perm,col="black",breaks=50,main="",xlab="t-value") #plot the results
abline(v = strength_t, col = "red", lwd = 2)
all_t <- c(strength_t,t_perm) # all t-values
ls <- mean(all_t <= strength_t) # probability of a value less than the observed
gr <- mean(all_t >= strength_t) # probability of a value greater than the observed
pval <- min(c(ls,gr))*2 # two-tailed p-value
pval
contact_mantel <- mantel(contact_rate, srkw_kinship, method = "spearman")
mantel(contact_rate, srkw_kinship, method = "spearman")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(aninet)
require(asnipe)
require(ergm)
require(ergm.count)
require(latentnet)
require(vegan)
contact_rate <- srkw_contact/srkw_sampling #rate of physical contacts
srkw_strength <- colSums(contact_rate) #individual strength centrality
srkw_strength <- as.numeric(scale(srkw_strength)) # scale the strengths to have mean 0 and SD 1
m1 <- lm(srkw_strength ~ age, data = srkw_attributes) # fit the linear model
strength_t <- summary(m1)$coefficients[2,3] #save the t-value
t_perm <- NA
for(i in 1:1000){
strength_perm <- sample(srkw_strength) #randomize the strength
m1.perm <- lm(strength_perm ~ age, data = srkw_attributes)
t_perm[i] <- summary(m1.perm)$coefficients[2,3]
}
hist(t_perm,col="black",breaks=50,main="",xlab="t-value") #plot the results
abline(v = strength_t, col = "red", lwd = 2)
all_t <- c(strength_t,t_perm) # all t-values
ls <- mean(all_t <= strength_t) # probability of a value less than the observed
gr <- mean(all_t >= strength_t) # probability of a value greater than the observed
pval <- min(c(ls,gr))*2 # two-tailed p-value
pval
mantel(contact_rate, srkw_kinship, method = "spearman")
age_sim <- attribute_similarity(srkw_attributes$age, type = "abs.diff")
age_sim
?attribute_similarity
age_sim <- attribute_similarity(srkw_attributes$age, type = "absdiff")
age_diff <- attribute_similarity(srkw_attributes$age, type = "absdiff")
age_diff
age_diff <- attribute_similarity(srkw_attributes$age, type = "discrete")
age_diff
age_diff <- attribute_similarity(srkw_attributes$age, type = "absdiff")
age_diff
class(attributes$age)
class(srkw_attributes$age)
library(aninet)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
age_diff <- attribute_similarity(srkw_attributes$age, type = "absdiff")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(aninet)
require(asnipe)
require(ergm)
require(ergm.count)
require(latentnet)
require(vegan)
contact_rate <- srkw_contact/srkw_sampling #rate of physical contacts
srkw_strength <- colSums(contact_rate) #individual strength centrality
srkw_strength <- as.numeric(scale(srkw_strength)) # scale the strengths to have mean 0 and SD 1
m1 <- lm(srkw_strength ~ age, data = srkw_attributes) # fit the linear model
strength_t <- summary(m1)$coefficients[2,3] #save the t-value
t_perm <- NA
for(i in 1:1000){
strength_perm <- sample(srkw_strength) #randomize the strength
m1.perm <- lm(strength_perm ~ age, data = srkw_attributes)
t_perm[i] <- summary(m1.perm)$coefficients[2,3]
}
hist(t_perm,col="black",breaks=50,main="",xlab="t-value") #plot the results
abline(v = strength_t, col = "red", lwd = 2)
all_t <- c(strength_t,t_perm) # all t-values
ls <- mean(all_t <= strength_t) # probability of a value less than the observed
gr <- mean(all_t >= strength_t) # probability of a value greater than the observed
pval <- min(c(ls,gr))*2 # two-tailed p-value
pval
mantel(contact_rate, srkw_kinship, method = "spearman")
age_diff <- attribute_similarity(srkw_attributes$age, type = "absdiff")
age_diff
age_sim <- attribute_similarity(srkw_attributes$age, type = "absdiff")
sex_sim <- attribute_similarity(srkw_attributes$sex, type = "discrete")
sex_sim
mrqap.dsp(contact_rate ~ srkw_kinship + age_sim + sex_sim, test.statistic = "t-value")
glmqap(srkw_contact ~ srkw_kinship + age_sim + sex_sim,
offset = log(srkw_sampling),
family = "poisson")
t_perm <- replicate(1000,{
strength_perm <- sample(srkw_strength)
m1.perm <- lm(strength_perm ~ age, data = srkw_attributes)
summary(m1.perm)$coefficients[2,3]
})
hist(t_perm,col="black",breaks=50,main="",xlab="t-value") #plot the results
abline(v = strength_t, col = "red", lwd = 2)
require(aninet)
require(asnipe)
require(ergm)
require(ergm.count)
require(latentnet)
require(vegan)
set.seed(420)
glmqap(srkw_contact ~ srkw_kinship + age_sim + sex_sim,
offset = log(srkw_sampling),
family = "poisson")
glmqap(srkw_contact ~ srkw_kinship + age_sim + sex_sim,
offset = log(srkw_sampling),
family = "poisson")
glmqap(srkw_contact ~ srkw_kinship + age_sim + sex_sim,
offset = log(srkw_sampling),
family = "poisson")
glmqap(srkw_contact ~ srkw_kinship + age_sim + sex_sim,
offset = log(srkw_sampling),
family = "poisson")
ls_contact <- latent_space(srkw_contact ~ srkw_kinship + age_sim + sex_sim,
ind.RE = T, dimensions = 2, effort = srkw_sampling,
family = "poisson")
ls_contact$summary
ls_contact$summary
z.mean <- apply(z, c(1,2), mean)
z <- ls_contact$z
z.mean <- apply(z, c(1,2), mean)
dim(z.mean)
z.mean <- apply(z, c(2,3), mean)
dim(z.mean)
z.mean
contact_network <- network(contact_rate, directed = F, ignore.eval = F, names.eval = "weight")
contact_network
plot(contact_network, coord = z.mean)
plot(contact_network, coord = z.mean)
plot(contact_network, coord = z.mean, edge.lwd = contact_rate/max(contact_rate))
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*200)
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*100)
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*50)
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*10)
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1)
hist(z[,1,2])
hist(z[,1,3])
hist(z[,2,2])
hist(z[,3,2])
hist(z[,4,2])
hist(z[,5,2])
hist(z[,6,2])
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2)
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 3)
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2.5)
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2)
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2)
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2)
ls_contact <- latent_space(srkw_contact ~ srkw_kinship + age_sim + sex_sim,
ind.RE = T, dimensions = 2, effort = srkw_sampling,
family = "poisson", adapt = 1000, burnin = 2000, sample = 2000)
ls_contact$summary
z <- ls_contact$z
z.mean <- apply(z, c(2,3), mean)
contact_network <- network(contact_rate, directed = F, ignore.eval = F, names.eval = "weight")
z <- ls_contact$z
z.mean <- apply(z, c(2,3), mean)
contact_network <- network(contact_rate, directed = F, ignore.eval = F, names.eval = "weight")
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2)
z <- ls_contact$z
z.mean <- apply(z, c(2,3), mean)
contact_network <- network(contact_rate, directed = F, ignore.eval = F, names.eval = "weight")
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2)
avg_d <- apply(ls_contact$distances,c(2,3),mean)
plot(cmdscale(avg_d))
plot(z.mean)
plot(z.mean, xlim = c(-3,3), ylim = c(-3,3))
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2)
z <- ls_contact$z
z.mean <- apply(z, c(2,3), mean)
contact_network <- network(contact_rate, directed = F, ignore.eval = F, names.eval = "weight")
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2)
plot(z.mean, xlim = c(-3,3), ylim = c(-3,3))
z <- ls_contact$z
z.mean <- apply(z, c(2,3), mean)
contact_network <- network(contact_rate, directed = F, ignore.eval = F, names.eval = "weight")
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2, edge.col = rgb(0,0,0,contact_rate/max(contact_rate)))
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2, edge.col = rgb(0,0,0,contact_rate/max(contact_rate)))
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2, edge.col = rgb(0,0,0,contact_rate/max(contact_rate)) + 0.5)
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2, edge.col = rgb(0,0,0,contact_rate/max(contact_rate)))
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2, edge.col = rgb(0,0,0,1-contact_rate/max(contact_rate)))
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2, edge.col = rgb(0,0,0,(1-contact_rate/max(contact_rate))))
contact_network%e%weight
contact_network%e%"weight"
contact_network%e%"col" <- contact_network%e%"weight" - min(contact_network%e%"weight")
coontact_network%e%"col" <- contact_network%e%"col"/max(contact_network%e%"col")
contact_network%e%"col" <- contact_network%e%"col"/max(contact_network%e%"col")
contact_network%e%"col"
hist(contact_network%e%"col")
contact_network%e%"col" <- rgb(0,0,0,contact_network%e%"col")
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2, edge.col = "col")
contact_network <- network(contact_rate, directed = F, ignore.eval = F, names.eval = "weight")
contact_network%e%"col" <- contact_network%e%"weight" - min(contact_network%e%"weight" + 0.001)
contact_network%e%"col" <- rgb(0,0,0,contact_network%e%"col")
contact_network <- network(contact_rate, directed = F, ignore.eval = F, names.eval = "weight")
contact_network%e%"col" <- contact_network%e%"weight" - min(contact_network%e%"weight") + 0.001
contact_network%e%"col" <- contact_network%e%"col"/max(contact_network%e%"col")
contact_network%e%"col" <- rgb(0,0,0,contact_network%e%"col")
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2, edge.col = "col")
contact_network%e%"col" <- contact_network%e%"weight" - min(contact_network%e%"weight") + 0.01
contact_network%e%"col" <- rgb(0,0,0,contact_network%e%"col")
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2, edge.col = "col")
contact_network%e%"col" <- contact_network%e%"weight" - min(contact_network%e%"weight") + 0.001
contact_network%e%"col" <- rgb(0,0,0,contact_network%e%"col")
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2, edge.col = "col")
contact_network%e%"col" <- contact_network%e%"weight" - min(contact_network%e%"weight") + 0.001
contact_network%e%"col" <- rgb(0,0,0,1-contact_network%e%"col")
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2, edge.col = "col")
contact_network <- network(contact_rate, directed = F, ignore.eval = F, names.eval = "weight")
contact_network%e%"col" <- contact_network%e%"weight" - min(contact_network%e%"weight") + 0.001
contact_network%e%"col"
hist(contact_network%e%"col")
contact_network%e%"col" <- contact_network%e%"col"/max(contact_network%e%"col")
hist(contact_network%e%"col")
contact_network%e%"col" <- contact_network%e%"weight" - min(contact_network%e%"weight") + 0.0001
contact_network%e%"col" <- contact_network%e%"col"/max(contact_network%e%"col")
contact_network%e%"col" <- rgb(0,0,0,1-contact_network%e%"col")
hist(contact_network%e%"col")
contact_network <- network(contact_rate, directed = F, ignore.eval = F, names.eval = "weight")
contact_network%e%"col" <- contact_network%e%"col"/max(contact_network%e%"col")
hist(contact_network%e%"col")
hist(contact_network%e%"col")
contact_network <- network(contact_rate, directed = F, ignore.eval = F, names.eval = "weight")
contact_network%e%"col" <- contact_network%e%"weight" - min(contact_network%e%"weight") + 0.0001
contact_network%e%"col" <- contact_network%e%"col"/max(contact_network%e%"col")
hist(contact_network%e%"col")
min(contact_network%e%"col")
max(contact_network%e%"col")
contact_network%e%"col" <- rgb(0,0,0,1-contact_network%e%"col")
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2, edge.col = "col")
contact_network%e%"col" <- contact_network%e%"weight" - min(contact_network%e%"weight") + 0.0001
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2, edge.col = "col")
rgb(0,0,0,contact_network%e%"col")
contact_network%e%"col" <- rgb(0,0,0,alpha = contact_network%e%"col")
z <- ls_contact$z
z.mean <- apply(z, c(2,3), mean)
contact_network <- network(contact_rate, directed = F, ignore.eval = F, names.eval = "weight")
contact_network%e%"col" <- contact_network%e%"weight" - min(contact_network%e%"weight") + 0.0001
contact_network%e%"col" <- contact_network%e%"col"/max(contact_network%e%"col")
contact_network%e%"col" <- rgb(0,0,0,alpha = contact_network%e%"col")
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2, edge.col = "col")
z <- ls_contact$z
z.mean <- apply(z, c(2,3), mean)
contact_network <- network(contact_rate, directed = F, ignore.eval = F, names.eval = "weight")
contact_network%e%"col" <- contact_network%e%"weight" - min(contact_network%e%"weight") + 0.001
contact_network%e%"col" <- contact_network%e%"col"/max(contact_network%e%"col")
contact_network%e%"col" <- rgb(0,0,0,alpha = contact_network%e%"col")
plot(contact_network, coord = z.mean, edge.lwd = (contact_rate/max(contact_rate))*20 + 1, vertex.cex = 2, edge.col = "col")
z <- MASS::mvrnorm(n = 20, mu = rep(0,2), Sigma = diag(x= 1, nrow = 2))
dist <- as.matrix(dist(z))
kinship <- matrix(rbeta(20*20,1,1),nrow=20,ncol=20)
kinship[upper.tri(kinship)] <- t(kinship)[upper.tri(kinship)]
diag(kinship) <- 0
ind_re <- rnorm(20, mean = 0, sd = 0.2)
re_i <- sapply(ind_re, function(z) rep(z,20))
re_j <- t(re_i)
p <- plogis(-1 - dist + re_i + re_j + 3*kinship)
diag(p) <- 0
d <- matrix(rpois(20*20, 30),nrow = 20, ncol = 20)
d[upper.tri(d)] <- t(d)[upper.tri(d)]
diag(d) <- 0
x <- matrix(rbinom(20*20, size = d, prob = p), nrow = 20, ncol = 20)
x[upper.tri(x)] <- t(x)[upper.tri(x)]
diag(x) <- 0
sri <- x/d
diag(sri) <- 0
m4 <- latent_space(x ~ 1, family = "binomial", ind.RE = F, effort = d)
require(aninet)
m4 <- latent_space(x ~ 1, family = "binomial", ind.RE = F, effort = d)
plot(m4)
plot(z)
plot(z, post.method = "median")
plot(m4, post.method = "median")
plot(m4, post.method = "mean")
plot(m4, post.method = "median")
plot(m4, post.method = "mds")
plot(m4$z[,1])
plot(m4$z[,,1])
plot(m4$z[1,1,])
plot(m4$z[1,,1])
plot(m4$z[,1,1])
plot(m4$z[,2,1])
plot(m4$z[,2,1],type="l")
plot(m4$z[,3,1],type="l")
plot(m4$d[,3,1],type="l")
plot(m4$d[,3,2],type="l")
plot(apply(m4$d,c(2,3),mean) ~ dist)
abline(a = 0, b = 1)
plot(m4, post.method = "mean", vertex.pch = 2)
plot(m4, post.method = "mean", vertex.cex = 2)
plot(m4, post.method = "mean", vertex.cex = 2, fill = "red")
plot(m4, post.method = "mean", vertex.cex = 2, border = "red")
warnings()
?plot.default
plot(m4, post.method = "mean", vertex.cex = 2, bg = "red")
plot(m4, post.method = "mean", vertex.cex = 2, vertex.pch = 1, bg = "red")
plot(m4, post.method = "mean", vertex.cex = 2, vertex.pch = 1, bg = "orange")
plot(m4, post.method = "mean", vertex.cex = 2, vertex.pch = 21, bg = "orange")
points(z, pch = vertex.pch, cex = vertex.cex, col = vertex.col, ...)
plot.latsoc <- function(object, post.method = "mean",
edge.col = NULL, edge.lwd = NULL,
vertex.pch = 19, vertex.col = "black", vertex.cex = 1,
labels = F, label.col = NULL, label.cex = NULL,
...){
n <- nrow(object$response)
if(!post.method %in% c("mean", "median", "mds")){
cat("Invalid post.method, using mean")
cat("\n")
post.method <- "mean"
}
if(dim(object$z)[[3]] > 2){
post.method <- "mds"
}
if(post.method == "mean"){
z <- apply(object$z,c(2,3),mean)
}
if(post.method == "median"){
z <- apply(object$z,c(2,3),median)
}
if(post.method == "mds"){
d <- apply(object$distances, c(2,3), mean)
z <- MASS::isoMDS(as.dist(d))$points
}
rate <- object$response/object$effort
diag(rate) <- 0
if(is.null(edge.col)){
edge.col <- rate - min(rate[rate > 0],na.rm=T) + 0.001
edge.col <- edge.col/max(edge.col,na.rm=T)
edge.col[edge.col < 0] <- 0
edge.col <- matrix(rgb(0,0,0,edge.col),nrow=n,ncol=n)
}
if(is.null(edge.lwd)){
edge.lwd <- rate - min(rate[rate > 0],na.rm=T) + 0.001
edge.lwd <- edge.lwd/max(edge.lwd,na.rm=T)
edge.lwd <- edge.lwd*4
}
plot(z, xlab = "Dimension 1", ylab = "Dimension 2", pch = vertex.pch, cex = vertex.cex, col = vertex.col, ...)
for(i in 1:(n-1)){
for(j in (i+1):n){
if(rate[i,j] > 0){
lines(x = z[c(i,j),1], y = z[c(i,j),2], lwd = edge.lwd[i,j], col = edge.col[i,j])
}
}
}
if(labels){
names <- colnames(object$response)
if(!is.null(names)){
text(x = z[,1], y = z[,2], labels = names, col = label.col, cex = label.cex)
}
}
points(z, pch = vertex.pch, cex = vertex.cex, col = vertex.col, ...)
}
points(z, pch = vertex.pch, cex = vertex.cex, col = vertex.col, ...)
plot(m4, post.method = "mean", vertex.cex = 2, vertex.pch = 21, bg = "orange")
plot(m4, post.method = "mean", vertex.cex = 2, vertex.pch = 21, bg = "orange", lwd = 3)
plot(m4, post.method = "mean", vertex.cex = 2, vertex.pch = 21, bg = "orange", lwd = 2)
plot.latsoc <- function(object, post.method = "mean",
edge.col = NULL, edge.lwd = NULL,
vertex.pch = 21, vertex.col = "black", vertex.cex = 1,
labels = F, label.col = NULL, label.cex = NULL,
...){
n <- nrow(object$response)
if(!post.method %in% c("mean", "median", "mds")){
cat("Invalid post.method, using mean")
cat("\n")
post.method <- "mean"
}
if(dim(object$z)[[3]] > 2){
post.method <- "mds"
}
if(post.method == "mean"){
z <- apply(object$z,c(2,3),mean)
}
if(post.method == "median"){
z <- apply(object$z,c(2,3),median)
}
if(post.method == "mds"){
d <- apply(object$distances, c(2,3), mean)
z <- MASS::isoMDS(as.dist(d))$points
}
rate <- object$response/object$effort
diag(rate) <- 0
if(is.null(edge.col)){
edge.col <- rate - min(rate[rate > 0],na.rm=T) + 0.001
edge.col <- edge.col/max(edge.col,na.rm=T)
edge.col[edge.col < 0] <- 0
edge.col <- matrix(rgb(0,0,0,edge.col),nrow=n,ncol=n)
}
if(is.null(edge.lwd)){
edge.lwd <- rate - min(rate[rate > 0],na.rm=T) + 0.001
edge.lwd <- edge.lwd/max(edge.lwd,na.rm=T)
edge.lwd <- edge.lwd*4
}
plot(z, xlab = "Dimension 1", ylab = "Dimension 2", pch = vertex.pch, cex = vertex.cex, col = vertex.col, ...)
for(i in 1:(n-1)){
for(j in (i+1):n){
if(rate[i,j] > 0){
lines(x = z[c(i,j),1], y = z[c(i,j),2], lwd = edge.lwd[i,j], col = edge.col[i,j])
}
}
}
if(labels){
names <- colnames(object$response)
if(!is.null(names)){
text(x = z[,1], y = z[,2], labels = names, col = label.col, cex = label.cex)
}
}
points(z, pch = vertex.pch, cex = vertex.cex, col = vertex.col, ...)
}
plot(m4, post.method = "mean", vertex.cex = 2)
plot(z, xlim = NULL)
plot.latsoc <- function(object, post.method = "mean",
edge.col = NULL, edge.lwd = NULL,
vertex.pch = 21, vertex.col = "black", vertex.cex = 1,
labels = F, label.col = NULL, label.cex = NULL,
xlim = NULL, ylim = NULL){
n <- nrow(object$response)
if(!post.method %in% c("mean", "median", "mds")){
cat("Invalid post.method, using mean")
cat("\n")
post.method <- "mean"
}
if(dim(object$z)[[3]] > 2){
post.method <- "mds"
}
if(post.method == "mean"){
z <- apply(object$z,c(2,3),mean)
}
if(post.method == "median"){
z <- apply(object$z,c(2,3),median)
}
if(post.method == "mds"){
d <- apply(object$distances, c(2,3), mean)
z <- MASS::isoMDS(as.dist(d))$points
}
rate <- object$response/object$effort
diag(rate) <- 0
if(is.null(edge.col)){
edge.col <- rate - min(rate[rate > 0],na.rm=T) + 0.001
edge.col <- edge.col/max(edge.col,na.rm=T)
edge.col[edge.col < 0] <- 0
edge.col <- matrix(rgb(0,0,0,edge.col),nrow=n,ncol=n)
}
if(is.null(edge.lwd)){
edge.lwd <- rate - min(rate[rate > 0],na.rm=T) + 0.001
edge.lwd <- edge.lwd/max(edge.lwd,na.rm=T)
edge.lwd <- edge.lwd*4
}
plot(z, xlab = "Dimension 1", ylab = "Dimension 2", cex = vertex.cex, bg = vertex.col, pch = 21, ylim = ylim, xlim = xlim)
for(i in 1:(n-1)){
for(j in (i+1):n){
if(rate[i,j] > 0){
lines(x = z[c(i,j),1], y = z[c(i,j),2], lwd = edge.lwd[i,j], col = edge.col[i,j])
}
}
}
if(labels){
names <- colnames(object$response)
if(!is.null(names)){
text(x = z[,1], y = z[,2], labels = names, col = label.col, cex = label.cex)
}
}
points(z, pch = 21, cex = vertex.cex, bg = vertex.col)
}
plot(m4)
plot(m4, vertex.col = "orange")
plot(m4, vertex.col = "red")
plot(m4, vertex.col = "red", vertex.cex = 2)
plot(m4, vertex.col = "red", vertex.cex = 1.2)
plot(m4, vertex.col = "red", vertex.cex = 1.1)
plot(m4, vertex.col = "red", vertex.cex = 1)
plot(m4, vertex.col = "red", vertex.cex = 1.2)
plot(m4, vertex.col = "red", vertex.cex = 1.2, labels = T)
colnames(x)
colnames(m4$response)
m4$response
plot(m4, vertex.col = "red", vertex.cex = 1.2, labels = F)
plot(z0)
plot(z)
m4$summary
plot(ls_plotting) # plot the model fit
#fit a model with only the latent space as a predictor (we'll exclude random effects to speed up fitting)
ls_plotting <- latent_space(srkw_contact ~ 1,
family = "poisson",
dimensions = 2, ind.RE = F,
effort = srkw_sampling,
sample = 50000, burnin = 20000)
plot(ls_plotting) # plot the model fit
