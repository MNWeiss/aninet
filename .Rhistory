counter <- counter+1 #update counter
samp.order <- sample(ncol(response)) #permuted order of rows and columns
eps.perm <- eps.mat[samp.order,samp.order] #permuted residuals
eps.perm <- eps.perm[lower.tri(eps.perm)] #vectorized
#fit permuted model and pull out z statistic
if(family != "betar" & family != "negbin"){
z.perm[j,i] <- summary(stats::glm(y ~ eps.perm + z, family = family, offset = o, weights = w))$coefficients[2,3]
}
if(family == "betar"){
z.perm[j,i] <- summary(betareg::betareg(y ~ eps.perm + z, weights = w))$coefficients$mean[2,3]
}
if(family == "negbin"){
z.perm[j,i] <- summary(MASS::glm.nb(y ~ eps.perm + z + offset(o), weights = w))$coefficients[2,3]
}
}
}
}
if(permutation == "X"){
pb <- utils::txtProgressBar(min = 1, max = nperm*length(predictors), style = 3) #create a progress bar
counter <- 1 #and a counter
for(i in 1:length(predictors)){ #for each predictor
x <- predictors[[i]] #pull out the predictor of interest
z <- predictors[-i] #other predictors
z <- do.call(cbind,lapply(z,function(p)p[lower.tri(p)])) #matrix
for(j in 1:nperm){
utils::setTxtProgressBar(pb,counter) #update progress
counter <- counter+1 #update counter
samp.order <- sample(ncol(response)) #permuted order of rows and columns
xp <- x[samp.order,samp.order]
xp <- xp[lower.tri(xp)]
#fit permuted model and pull out z statistic
if(family != "betar" & family != "negbin"){
z.perm[j,i] <- summary(stats::glm(y ~ xp + z, family = family, offset = o, weights = w))$coefficients[2,3]
}
if(family == "betar"){
z.perm[j,i] <- summary(betareg::betareg(y ~ xp + z, weights = w))$coefficients$mean[2,3]
}
if(family == "negbin"){
z.perm[j,i] <- summary(MASS::glm.nb(y ~ xp + z + offset(o), weights = w))$coefficients[2,3]
}
}
}
}
if(permutation == "Y"){
pb <- utils::txtProgressBar(min = 1, max = nperm, style = 3) #create a progress bar
counter <- 1 #and a counter
for(i in 1:nperm){
utils::setTxtProgressBar(pb,counter) #update progress
counter <- counter+1 #update counter
samp_order <- sample(nrow(response))
r.p <- response[samp_order,samp_order]
yp <- r.p[lower.tri(r.p)]
if(!is.null(offset)){
offset.p <- offset[samp_order,samp_order]
op <- offset.p[lower.tri(offset.p)]
}else{
op <- NULL
}
if(!is.null(weights)){
weights.p <- weights[samp_order,samp_order]
wp <- weights.p[lower.tri(weights.p)]
}else{
wp <- NULL
}
if(family != "betar" & family != "negbin"){
z.perm[i,] <- summary(stats::glm(yp ~ x, family = family, offset = op, weights = wp))$coefficients[-1,3]
}
if(family == "betar"){
z.perm[i,] <- summary(betareg::betareg(yp ~ x, weights = wp))$coefficients$mean[-1,3]
}
if(family == "negbin"){
z.perm[i,] <- summary(MASS::glm.nb(yp ~ x + offset(op), weights = wp))$coefficients[-1,3]
}
}
}
pval <- sapply(1:length(predictors), function(p){
min(
c(sum(z.perm[,p] >= z.val[p])+1,
sum(z.perm[,p] <= z.val[p])+1
))/(nperm+1)
})*2
res <- list(
call = fm,
pred_names = x_names,
family = family,
permutation = permutation,
nperm = nperm,
coefficients = ifelse(family = "betar", mod.orig$coefficients$mean[-1], mod.orig$coefficients[-1]),
stderr = ifelse(family = "betar", summary(mod.orig)$coefficients$mean[-1,2], summary(mod.orig)$coefficients[-1,2]),
z = z.val,
p = pval,
permuted_z = z.perm,
aic = AIC(mod.orig),
bic = BIC(mod.orig),
loglik = as.numeric(logLik(mod.orig)),
weights = deparse(substitute(weights)),
offset = deparse(substitute(offset))
)
if(family == "betar"){
res$precision <- mod.orig$coefficients$precision
}
if(family == "negbin"){
res$theta <- mod.orig$theta
}
class(res) <- "glmqap"
return(res)
}
print.glmqap <- function(x){
perm_method <- ifelse(x$permutation == "X", "X permutation", ifelse(x$permutation == "Y", "Y permutation", "Doube-Semi-Partialling"))
cat(paste("GLMQAP with ", perm_method, "\n\n", sep = ""))
cat(paste("Formula: ", Reduce(paste, deparse(x$call)), "\n\n"))
cat("Coefficients:\n")
results_mat <- cbind(x$coefficients, x$stderr, x$z, x$p)
colnames(results_mat) <- c("Estimate", "Std. Error", "Z", "P(two-tailed)")
row.names(results_mat) <- x$pred_names
print.table(results_mat)
cat("log-likelihood:", x$loglik, "\n")
cat("AIC:", x$aic, "\n")
cat("BIC:", x$bic, "\n")
cat("\n")
}
x <- matrix(runif(100,0,1),nrow = 10, ncol = 10)
x1 <- matrix(runif(100,0,1),nrow = 10, ncol = 10)
x2 <- matrix(runif(100,0,1),nrow = 10, ncol = 10)
y <- matrix(runif(100,0,1),nrow = 10, ncol = 10)
m1 <- glmqap(y ~ x1 + x2)
m1 <- glmqap(y ~ x1 + x2)
#' In \code{betareg()}, weights are treated as sampling, rather than proportional, weights. This means that the function assumes your true sample size is \code{sum(weights)}. While this won't effect your estimate or significance (because we use permutations), it will give
#' pretty strange results for the standard errors. A solution is to transform your weights such that \code{sum(weights) = length(weights)}.
#'
#' The function allows multiple types of permutation. The \code{"DSP"} method is the most robust, and is based on the method proposed by Dekker et al. (2007). This explicitly tests the effect of each covariate, controlling for the effect of others and the relationship between variables.
#' The \code{"Y"} permutation method permutes the response matrix, and tests the null hypothesis that the response is unrelated to any of the responses.
#' The \code{"X"} method permutes each predictor matrix, testing the null hypothesis of no relationship, but importantly does not control for any covariance among predictors.
#'
#' @return An object of class \code{glmqap}, containing a summary of the fitted model. The coefficients table now contains p-values from the randomizations. In addition to all information normally in the respective model summary objects, the object contains an element called \code{perm.stats}, which is a matrix containing the permuted value of each pivotal statistic for all permutations.
#'
#' @export
glmqap <- function(formula, family = "gaussian", weights=NULL, offset=NULL, nperm=1000, permutation = "DSP"){
fm <- formula
formula <- stats::model.frame(formula, na.action = NULL)
i <- attr(attr(formula, "terms"), "response")
response <- as.matrix(formula[i])
x_names <- attr(attr(formula, "terms"), "term.labels")
predictors <- list()
for (i in 1:length(x_names)) {
predictors[[i]] <- as.matrix(formula[[x_names[i]]])
}
names(predictors) <- x_names
y <- response[lower.tri(response)] #vectorized response
x <- do.call(cbind,lapply(predictors,function(z)z[lower.tri(z)])) #matrix of predictors
if(is.null(weights)){ #if no weights are specified
w <- NULL #w is null
}else{ #otherwise
w <- weights[lower.tri(weights)] #pull out weights as a vector
}
if(is.null(offset)){ #same as above for offsets
o <- NULL
}else{
o <- offset[lower.tri(offset)]
}
print("Fitting Model")
if(family != "betar" & family != "negbin"){ #if a built-in GLM family is specified
mod.orig <- stats::glm(y ~ x, weights = w, offset = o, family = family) #fit the GLM
z.val <- summary(mod.orig)$coefficients[-1,3] #pull out predictor z values
}
if(family == "betar"){ #if beta regression is specified
mod.orig <- betareg::betareg(y ~ x, weights = w) #fit model
z.val <- summary(mod.orig)$coefficients$mean[-1,3] #pull out z values
}
if(family == "negbin"){ #same for negative binomial regression
mod.orig <- MASS::glm.nb(y ~ x + offset(o), weights = w)
z.val <- summary(mod.orig)$coefficients[-1,3]
}
summ <- summary(mod.orig)
summ$call[[2]] <- fm
summ$call <- summ$call[1:2]
z.perm <- matrix(nrow = nperm, ncol = length(z.val)) #matrix to hold permuted z values
print("Performing Permutations")
if(permutation == "DSP"){
pb <- utils::txtProgressBar(min = 1, max = nperm*length(predictors), style = 3) #create a progress bar
counter <- 1 #and a counter
for(i in 1:length(predictors)){ #for each predictor
x <- predictors[[i]] #pull out the predictor of interest
z <- predictors[-i] #other predictors
x <- x[lower.tri(x)] #vectorize
z <- do.call(cbind,lapply(z,function(p)p[lower.tri(p)])) #matrix
eps <- stats::residuals(stats::lm(x ~ z)) #residuals of x given z
eps.mat <- response #turn it into a matrix
eps.mat[lower.tri(eps.mat)] <- eps
eps.mat[upper.tri(eps.mat)] <- t(eps.mat)[upper.tri(eps.mat)] #symmetrize
for(j in 1:nperm){
utils::setTxtProgressBar(pb,counter) #update progress
counter <- counter+1 #update counter
samp.order <- sample(ncol(response)) #permuted order of rows and columns
eps.perm <- eps.mat[samp.order,samp.order] #permuted residuals
eps.perm <- eps.perm[lower.tri(eps.perm)] #vectorized
#fit permuted model and pull out z statistic
if(family != "betar" & family != "negbin"){
z.perm[j,i] <- summary(stats::glm(y ~ eps.perm + z, family = family, offset = o, weights = w))$coefficients[2,3]
}
if(family == "betar"){
z.perm[j,i] <- summary(betareg::betareg(y ~ eps.perm + z, weights = w))$coefficients$mean[2,3]
}
if(family == "negbin"){
z.perm[j,i] <- summary(MASS::glm.nb(y ~ eps.perm + z + offset(o), weights = w))$coefficients[2,3]
}
}
}
}
if(permutation == "X"){
pb <- utils::txtProgressBar(min = 1, max = nperm*length(predictors), style = 3) #create a progress bar
counter <- 1 #and a counter
for(i in 1:length(predictors)){ #for each predictor
x <- predictors[[i]] #pull out the predictor of interest
z <- predictors[-i] #other predictors
z <- do.call(cbind,lapply(z,function(p)p[lower.tri(p)])) #matrix
for(j in 1:nperm){
utils::setTxtProgressBar(pb,counter) #update progress
counter <- counter+1 #update counter
samp.order <- sample(ncol(response)) #permuted order of rows and columns
xp <- x[samp.order,samp.order]
xp <- xp[lower.tri(xp)]
#fit permuted model and pull out z statistic
if(family != "betar" & family != "negbin"){
z.perm[j,i] <- summary(stats::glm(y ~ xp + z, family = family, offset = o, weights = w))$coefficients[2,3]
}
if(family == "betar"){
z.perm[j,i] <- summary(betareg::betareg(y ~ xp + z, weights = w))$coefficients$mean[2,3]
}
if(family == "negbin"){
z.perm[j,i] <- summary(MASS::glm.nb(y ~ xp + z + offset(o), weights = w))$coefficients[2,3]
}
}
}
}
if(permutation == "Y"){
pb <- utils::txtProgressBar(min = 1, max = nperm, style = 3) #create a progress bar
counter <- 1 #and a counter
for(i in 1:nperm){
utils::setTxtProgressBar(pb,counter) #update progress
counter <- counter+1 #update counter
samp_order <- sample(nrow(response))
r.p <- response[samp_order,samp_order]
yp <- r.p[lower.tri(r.p)]
if(!is.null(offset)){
offset.p <- offset[samp_order,samp_order]
op <- offset.p[lower.tri(offset.p)]
}else{
op <- NULL
}
if(!is.null(weights)){
weights.p <- weights[samp_order,samp_order]
wp <- weights.p[lower.tri(weights.p)]
}else{
wp <- NULL
}
if(family != "betar" & family != "negbin"){
z.perm[i,] <- summary(stats::glm(yp ~ x, family = family, offset = op, weights = wp))$coefficients[-1,3]
}
if(family == "betar"){
z.perm[i,] <- summary(betareg::betareg(yp ~ x, weights = wp))$coefficients$mean[-1,3]
}
if(family == "negbin"){
z.perm[i,] <- summary(MASS::glm.nb(yp ~ x + offset(op), weights = wp))$coefficients[-1,3]
}
}
}
pval <- sapply(1:length(predictors), function(p){
min(
c(sum(z.perm[,p] >= z.val[p])+1,
sum(z.perm[,p] <= z.val[p])+1
))/(nperm+1)
})*2
res <- list(
call = fm,
pred_names = x_names,
family = family,
permutation = permutation,
nperm = nperm,
coefficients = ifelse(family == "betar", mod.orig$coefficients$mean[-1], mod.orig$coefficients[-1]),
stderr = ifelse(family == "betar", summary(mod.orig)$coefficients$mean[-1,2], summary(mod.orig)$coefficients[-1,2]),
z = z.val,
p = pval,
permuted_z = z.perm,
aic = AIC(mod.orig),
bic = BIC(mod.orig),
loglik = as.numeric(logLik(mod.orig)),
weights = deparse(substitute(weights)),
offset = deparse(substitute(offset))
)
if(family == "betar"){
res$precision <- mod.orig$coefficients$precision
}
if(family == "negbin"){
res$theta <- mod.orig$theta
}
class(res) <- "glmqap"
return(res)
}
m1 <- glmqap(y ~ x1 + x2)
print(m1)
print.glmqap <- function(x){
perm_method <- ifelse(x$permutation == "X", "X permutation", ifelse(x$permutation == "Y", "Y permutation", "Doube-Semi-Partialling"))
cat(paste("GLMQAP with ", perm_method, "\n\n", sep = ""))
cat(paste("Formula: ", Reduce(paste, deparse(x$call)), "\n\n"))
cat("Coefficients:\n")
results_mat <- cbind(x$coefficients, x$stderr, x$z, x$p)
colnames(results_mat) <- c("Estimate", "Std. Error", "Z", "P(two-tailed)")
row.names(results_mat) <- x$pred_names
print.table(results_mat)
cat("log-likelihood:", x$loglik, "\t")
cat("AIC:", x$aic, "\t")
cat("BIC:", x$bic, "\t")
cat("\n")
}
print(m1)
print.glmqap <- function(x){
perm_method <- ifelse(x$permutation == "X", "X permutation", ifelse(x$permutation == "Y", "Y permutation", "Doube-Semi-Partialling"))
cat(paste("GLMQAP with ", perm_method, "\n\n", sep = ""))
cat(paste("Formula: ", Reduce(paste, deparse(x$call)), "\n\n"))
cat("Coefficients:\n")
results_mat <- cbind(x$coefficients, x$stderr, x$z, x$p)
colnames(results_mat) <- c("Estimate", "Std. Error", "Z", "P(two-tailed)")
row.names(results_mat) <- x$pred_names
print.table(results_mat)
cat("\n")
cat("log-likelihood:", x$loglik, "\t")
cat("AIC:", x$aic, "\t")
cat("BIC:", x$bic, "\t")
cat("\n")
}
print(m1)
print.glmqap <- function(x){
perm_method <- ifelse(x$permutation == "X", "X permutation", ifelse(x$permutation == "Y", "Y permutation", "Doube-Semi-Partialling"))
cat(paste("GLMQAP with ", perm_method, "\n\n", sep = ""))
cat(paste("Formula: ", Reduce(paste, deparse(x$call)), "\n\n"))
cat(paste("Weights:", x$weights), "\n\n")
cat(paste("Offset:", x$offset), "\n\n")
cat("Coefficients:\n")
results_mat <- cbind(x$coefficients, x$stderr, x$z, x$p)
colnames(results_mat) <- c("Estimate", "Std. Error", "Z", "P(two-tailed)")
row.names(results_mat) <- x$pred_names
print.table(results_mat)
cat("\n")
cat("log-likelihood:", x$loglik, "\t")
cat("AIC:", x$aic, "\t")
cat("BIC:", x$bic, "\t")
cat("\n")
}
print(m1)
m1
print.glmqap <- function(x){
perm_method <- ifelse(x$permutation == "X", "X permutation", ifelse(x$permutation == "Y", "Y permutation", "Doube-Semi-Partialling"))
cat(paste("GLMQAP with ", perm_method, "\n\n", sep = ""))
cat(paste("Formula: ", Reduce(paste, deparse(x$call)), "\n"))
cat(paste("Weights:", x$weights), "\n")
cat(paste("Offset:", x$offset), "\n")
cat("Coefficients:\n")
results_mat <- cbind(x$coefficients, x$stderr, x$z, x$p)
colnames(results_mat) <- c("Estimate", "Std. Error", "Z", "P(two-tailed)")
row.names(results_mat) <- x$pred_names
print.table(results_mat)
cat("\n")
cat("log-likelihood:", x$loglik, "\t")
cat("AIC:", x$aic, "\t")
cat("BIC:", x$bic, "\t")
cat("\n")
}
m1
print.glmqap <- function(x){
perm_method <- ifelse(x$permutation == "X", "X permutation", ifelse(x$permutation == "Y", "Y permutation", "Doube-Semi-Partialling"))
cat(paste("GLMQAP with ", perm_method, "\n\n", sep = ""))
cat(paste("Formula: ", Reduce(paste, deparse(x$call)), "\n"))
cat(paste("Weights:", x$weights), "\n")
cat(paste("Offset:", x$offset), "\n\n")
cat("Coefficients:\n")
results_mat <- cbind(x$coefficients, x$stderr, x$z, x$p)
colnames(results_mat) <- c("Estimate", "Std. Error", "Z", "P(two-tailed)")
row.names(results_mat) <- x$pred_names
print.table(results_mat)
cat("\n")
cat("log-likelihood:", x$loglik, "\t")
cat("AIC:", x$aic, "\t")
cat("BIC:", x$bic, "\t")
cat("\n")
}
m1
AIC(m1)
m1 <- glmqap(y ~ x1 + x2, permutation = "Y")
m1
m1 <- glmqap(y ~ x1 + x2, permutation = "X")
m1
m1 <- glmqap(y ~ x1 + x2, permutation = "X", weights = matrix(runif(100,0,1),10,10))
m1
print.glmqap <- function(x){
perm_method <- ifelse(x$permutation == "X", "X permutation", ifelse(x$permutation == "Y", "Y permutation", "Doube-Semi-Partialling"))
cat(paste("GLMQAP with ", perm_method, "\n\n", sep = ""))
cat(paste("Formula: ", Reduce(paste, deparse(x$call)), "\n"))
cat(paste("Weights:", x$weights), "\n")
cat(paste("Offset:", x$offset), "\n")
cat(paste("Permutations: ", x$nperm), "\n\n")
cat("Coefficients:\n")
results_mat <- cbind(x$coefficients, x$stderr, x$z, x$p)
colnames(results_mat) <- c("Estimate", "Std. Error", "Z", "P(two-tailed)")
row.names(results_mat) <- x$pred_names
print.table(results_mat)
cat("\n")
cat("log-likelihood:", x$loglik, "\t")
cat("AIC:", x$aic, "\t")
cat("BIC:", x$bic, "\t")
cat("\n")
}
m1
print.glmqap <- function(x){
perm_method <- ifelse(x$permutation == "X", "X permutation", ifelse(x$permutation == "Y", "Y permutation", "Doube-Semi-Partialling"))
cat(paste("GLMQAP with ", perm_method, "\n\n", sep = ""))
cat(paste("Formula: ", Reduce(paste, deparse(x$call)), "\n"))
cat(paste("Family: ", x$family), "\n")
cat(paste("Weights:", x$weights), "\n")
cat(paste("Offset:", x$offset), "\n")
cat(paste("Permutations: ", x$nperm), "\n\n")
cat("Coefficients:\n")
results_mat <- cbind(x$coefficients, x$stderr, x$z, x$p)
colnames(results_mat) <- c("Estimate", "Std. Error", "Z", "P(two-tailed)")
row.names(results_mat) <- x$pred_names
print.table(results_mat)
cat("\n")
cat("log-likelihood:", x$loglik, "\t")
cat("AIC:", x$aic, "\t")
cat("BIC:", x$bic, "\t")
cat("\n")
}
m1
library(aninet)
library(aninet)
?print.glmqap
library(aninet)
?aninet
.libPaths()
.libPaths(.libPaths()[2])
library(aninet)
print.glmqap
y
y <- matrix(runif(100,0,1), nrow = 10, ncol = 10)
x1 <- matrix(runif(100,0,1), nrow = 10, ncol = 10)
x2 <- matrix(runif(100,0,1), nrow = 10, ncol = 10)
m1 <- glmqap(y ~ x1 + x2)
m1
library(aninet)
m1 <- glmqap(y ~ x1 + x2)
m1
print(m1)
?print.glmqap
print(m1)
m1
#' Print function of glmqap objects
#'
#' Prints summary information about GLMQAP models
#'
#' @param x A glmqap object
#' @details Prints formatted results from GLMQAP fits, including formula, family, permutations, weights and offsets, coefficients, standard errors, test statistics, and p-values
#' @return Printed results
print.glmqap <- function(x){
perm_method <- ifelse(x$permutation == "X", "X permutation", ifelse(x$permutation == "Y", "Y permutation", "Doube-Semi-Partialling"))
cat(paste("GLMQAP with ", perm_method, "\n\n", sep = ""))
cat(paste("Formula: ", Reduce(paste, deparse(x$call)), "\n"))
cat(paste("Family: ", x$family), "\n")
cat(paste("Weights:", x$weights), "\n")
cat(paste("Offset:", x$offset), "\n")
cat(paste("Permutations: ", x$nperm), "\n\n")
cat("Coefficients:\n")
results_mat <- cbind(x$coefficients, x$stderr, x$z, x$p)
colnames(results_mat) <- c("Estimate", "Std. Error", "Z", "P(two-tailed)")
row.names(results_mat) <- x$pred_names
print.table(results_mat)
cat("\n")
cat("log-likelihood:", x$loglik, "\t")
cat("AIC:", x$aic, "\t")
cat("BIC:", x$bic, "\t")
cat("\n")
}
m1
class(m1)
library(aninet)
m1 <- glmqap(y ~ x1 + x2)
print(m1)
m1
y <- matrix(runif(100,0,1), nrow = 10, ncol = 10)
x1 <- matrix(runif(100,0,1), nrow = 10, ncol = 10)
x2 <- matrix(runif(100,0,1), nrow = 10, ncol = 10)
m1 <- glmqap(y ~ x1 + x2)
print(m1)
print.glmqap(m1)
library(aninet)
m1 <- glmqap(y ~ x1 + x2)
m1
gai(y ~ x1 + x2)
gai(y ~ x1 + x2, type = "deviance")
gai(y ~ x1 + x2, type = "deviance")
gai(y ~ x1 + x2)
library(aninet)
gai(y ~ x1 + x2)
joint_gregariousness(y)
joint_gregariousness(y)
hist(joint_gregariousness(y))
d <- sample(10,100,rep=T)
x <- rbinom(size = d, n = 100, prob = 0.1)
hist(x/d)
social_differentiation(x,d)
social_differentiation(x,d,method="Whitehead")
library(aninet)
file.exists("~/.ssh/id_rsa.pub")
