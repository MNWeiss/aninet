gbi <- aninet::srkw_sightings
randomize_gbi(gbi)
randomize_gbi(gbi)
randomize_gbi(gbi)
randomize_gbi(gbi)
randomize_gbi(gbi)
randomize_gbi(gbi)
randomize_gbi(gbi)
randomize_gbi(gbi) == gbi
randomize_gbi(gbi, method = "trial", swaps = 10000) == gbi
if(class(gbi)[1] != "matrix"){
stop("The GBI must be a matrix")
}
if(any(!unique(c(gbi)) %in% c(0,1))){
stop("The GBI must have values 0 and 1")
}
if(is.null(time)){
time <- rep(1, nrow(gbi))
}
if(is.null(class)){
class <- rep(1,nrow(gbi))
}
time
class
n <- ncol(gbi)
t <- nrow(gbi)
swaps <- 100
for(i in 1:swaps){
rows <- sample(t,2)
cols <- sample(n,2)
if(class[cols[1]] == class[cols[2]]){
if(time[rows[1]] == time[rows[2]]){
test_matrix <- gbi[rows,cols]
if(all(colSums(test_matrix) == 1) & all(rowSums(test_matrix) == 1)){
gbi[rows,cols] <- ifelse(gbi[rows,cols] == 1, 0, 1)
}
}
}
}
rows
cols
time
class
#' or individual classes to control for.
#' There are several methods that can be used to generate these null models. Included here is the classical sequential swap approach (through \code{method = "sequential"}), the trial swap approach (\code{method = "trial"}) and the Curveball algorithm (\code{method = "curveball"}).
#' The sequential swap method is included for completeness, but is generally not recommended, as it does not evenly sample the possible matrices. The curveball method is generally faster, and does not require the user to specify the number of swaps.
#'
#' @return The permuted group by individual matrix
#'
#' @examples
#' gbi <
#'
#' @export
randomize_gbi <- function(gbi, method = "curveball", time = NULL, class = NULL, swaps = NULL){
if(class(gbi)[1] != "matrix"){
stop("The GBI must be a matrix")
}
if(any(!unique(c(gbi)) %in% c(0,1))){
stop("The GBI must have values 0 and 1")
}
if(is.null(time)){
time <- rep(1, nrow(gbi))
}
if(is.null(class)){
class <- rep(1,nrow(gbi))
}
if(method != "curveball" & is.null(swaps)){
stop("Swapping methods require the number of swaps to be specified")
}
if(!is.null(swaps)){
if(!is.numeric(swaps)){
stop("Number of swaps must be numeric")
}
if(length(swaps) > 1){
swaps <- swaps[1]
}
swaps <- round(swaps)
}
classes <- unique(class)
times <- unique(time)
if(! method %in% c("curveball", "trial", "sequential"))
if(method == "curveball"){
for(i in times){
for(j in classes){
gbi[time == i, class = j] <- backbone::curveball(gbi[time == i, class = j,drop=F])
}
}
}
if(method == "trial"){
n <- ncol(gbi)
t <- nrow(gbi)
for(i in 1:swaps){
rows <- sample(t,2)
cols <- sample(n,2)
if(class[cols[1]] == class[cols[2]]){
if(time[rows[1]] == time[rows[2]]){
test_matrix <- gbi[rows,cols]
if(all(colSums(test_matrix) == 1) & all(rowSums(test_matrix) == 1)){
gbi[rows,cols] <- ifelse(gbi[rows,cols] == 1, 0, 1)
}
}
}
}
}
if(method == "sequential"){
n <- ncol(gbi)
t <- nrow(gbi)
for(i in 1:swaps){
repeat{
rows <- sample(t,2)
cols <- sample(n,2)
if(class[cols[1]] == class[cols[2]]){
if(time[rows[1]] == time[rows[2]]){
test_matrix <- gbi[rows,cols]
if(all(colSums(test_matrix) == 1) & all(rowSums(test_matrix) == 1)){
break;
}
}
}
}
gbi[rows,cols] <- ifelse(gbi[rows,cols] == 1, 0, 1)
}
}
return(gbi)
}
randomize_gbi(gbi, method = "trial", swaps = 10000)
randomize_gbi(gbi, method = "trial", swaps = 1000)
randomize_gbi(gbi, method = "trial", swaps = 10)
randomize_gbi(gbi, method = "trial", swaps = 1)
randomize_gbi(gbi, method = "trial", swaps = 1)
randomize_gbi(gbi, method = "trial", swaps = 1)
randomize_gbi(gbi, method = "trial", swaps = 1)
#' or individual classes to control for.
#' There are several methods that can be used to generate these null models. Included here is the classical sequential swap approach (through \code{method = "sequential"}), the trial swap approach (\code{method = "trial"}) and the Curveball algorithm (\code{method = "curveball"}).
#' The sequential swap method is included for completeness, but is generally not recommended, as it does not evenly sample the possible matrices. The curveball method is generally faster, and does not require the user to specify the number of swaps.
#'
#' @return The permuted group by individual matrix
#'
#' @examples
#' gbi <
#'
#' @export
randomize_gbi <- function(gbi, method = "curveball", time = NULL, class = NULL, swaps = NULL){
if(class(gbi)[1] != "matrix"){
stop("The GBI must be a matrix")
}
if(any(!unique(c(gbi)) %in% c(0,1))){
stop("The GBI must have values 0 and 1")
}
if(is.null(time)){
time <- rep(1, nrow(gbi))
}
if(is.null(class)){
class <- rep(1,ncol(gbi))
}
if(method != "curveball" & is.null(swaps)){
stop("Swapping methods require the number of swaps to be specified")
}
if(!is.null(swaps)){
if(!is.numeric(swaps)){
stop("Number of swaps must be numeric")
}
if(length(swaps) > 1){
swaps <- swaps[1]
}
swaps <- round(swaps)
}
classes <- unique(class)
times <- unique(time)
if(! method %in% c("curveball", "trial", "sequential"))
if(method == "curveball"){
for(i in times){
for(j in classes){
gbi[time == i, class = j] <- backbone::curveball(gbi[time == i, class = j,drop=F])
}
}
}
if(method == "trial"){
n <- ncol(gbi)
t <- nrow(gbi)
for(i in 1:swaps){
rows <- sample(t,2)
cols <- sample(n,2)
if(class[cols[1]] == class[cols[2]]){
if(time[rows[1]] == time[rows[2]]){
test_matrix <- gbi[rows,cols]
if(all(colSums(test_matrix) == 1) & all(rowSums(test_matrix) == 1)){
gbi[rows,cols] <- ifelse(gbi[rows,cols] == 1, 0, 1)
}
}
}
}
}
if(method == "sequential"){
n <- ncol(gbi)
t <- nrow(gbi)
for(i in 1:swaps){
repeat{
rows <- sample(t,2)
cols <- sample(n,2)
if(class[cols[1]] == class[cols[2]]){
if(time[rows[1]] == time[rows[2]]){
test_matrix <- gbi[rows,cols]
if(all(colSums(test_matrix) == 1) & all(rowSums(test_matrix) == 1)){
break;
}
}
}
}
gbi[rows,cols] <- ifelse(gbi[rows,cols] == 1, 0, 1)
}
}
return(gbi)
}
randomize_gbi(gbi, method = "trial", swaps = 100)
randomize_gbi(gbi, method = "trial", swaps = 100000)
randomize_gbi(gbi, method = "trial", swaps = 10000)
randomize_gbi(gbi, method = "trial", swaps = 10000) == gbi
randomize_gbi(gbi, method = "trial", swaps = 10000) == gbi
randomize_gbi(gbi, method = "trial", swaps = 10000) == gbi
randomize_gbi(gbi, method = "trial", swaps = 10000) == gbi
randomize_gbi(gbi, method = "trial", swaps = 10000) == gbi
?curveball
View(curveball)
aninet::srkw_sampling
contact_rate
contact_rate <- igraph::graph.adjacency(srkw_contact/srkw_sampling, weighted = T, mode = "undirected")
require(aninet)
contact_rate <- igraph::graph.adjacency(srkw_contact/srkw_sampling, weighted = T, mode = "undirected")
contact_eigen <- igraph::eigen_centrality(contact_rate, scale = F)$vector
require(lme4)
double_semi_partialling(model_eigen, 1000)
double_semi_partialling <- function(model, nperm){
cl <- class(model)
if(length(cl) > 1) cl <- cl[1]
if(!cl %in% c("glm","lmerMod","glmerMod","lm")){
stop("Model must be a model fit using lm, glm, lmer, or glmer")
}
if(cl == "lmerMod"){
res <- dsp.lmer(model, nperm)
}
if(cl == "glmerMod"){
res <- dsp.glmer(model, nperm)
}
if(cl == "lm"){
res <- dsp.lm(model,nperm)
}
if(cl == "glm"){
res <- dsp.glm(model,nperm)
}
return(res)
}
dsp.lmer <- function(model, nperm){
form <- formula(model) # get the formula from the model
if(grepl("*",as.character(form)[[3]], fixed = T) | grepl(":",as.character(form)[[3]], fixed = T)){
stop("Model contains interaction effects; DSP cannot test these models")
}
data <- model@frame # get the data from the model
data <- cbind(data,rep(1,nrow(data))) # add an intercept column
colnames(data)[ncol(data)] <- "(Intercept)" # name the intercept column
fixed <- names(fixef(model)) #get the names of the fixed effects
rand <- names(ranef(model)) #names of the random effects
X <- data[,fixed,drop=F] # get the fixed predictors as a matrix
if(any(apply(X,2,class) == "factor")) stop("Fixed predictors must be numeric")
X <- as.matrix(X) # make the predictors a matrix
B <- data[,rand,drop=F] #get the random effect matrix
group.memb <- apply(B,1,function(z){
paste(z,collapse="-") # collapse all group memberships into a single character vector
})
all_groups <- unique(group.memb) # unique group memberships
if(length(all_groups) == nrow(data)){
stop("Number of unique random effect levels equal to number of observations")
}
Y <- data[,!colnames(data) %in% c(rand,fixed)] #get the responses
t.perm <- matrix(nrow = nperm, ncol = ncol(X)) #matrix to hold t values
for(j in 1:ncol(X)){
x <- X[,j] #get the jth predictor
z <- X[,-j] #get all other predictors
resid.x <- residuals(lm(x ~ -1 + z)) #get residuals
for(i in 1:nperm){ #for each permutation
for(k in 1:length(all_groups)){ # for each unique group
resid.x[group.memb == all_groups[k]] <- sample(resid.x[group.memb == all_groups[k]]) #shuffle the residuals in that group
}
data.perm <- data #copy original data
data.perm[,fixed[j]] <- resid.x #plug in residuals
if(fixed[j] == "(Intercept)"){ # if testing the intercept
colnames(data.perm)[colnames(data.perm) == fixed[j]] <- "Intercept" # get a nicer intercept
form.j <- update(form, ~ . + Intercept - 1) # update the formula
fit.perm <- lme4::lmer(form.j, data = data.perm) # fit the permuted model
t.perm[i,j] <- summary(fit.perm)$coef["Intercept",3] #save t-value
}else{
fit.perm <- lme4::lmer(form, data = data.perm) # fit the permuted model
t.perm[i,j] <- summary(fit.perm)$coef[j,3] # save the t-value
}
}
}
t.obs <- summary(model)$coef[,3] #observed t-value
# calculate p-values
pval <- sapply(1:length(t.obs), function(z){
p.gr <- mean(c(t.perm[,z],t.obs[z]) >= t.obs[z])
p.ls <- mean(c(t.perm[,z],t.obs[z]) <= t.obs[z])
min(c(p.gr,p.ls))*2
})
# make a summary table
summary_table <- summary(model)$coef
summary_table <- cbind(summary_table, pval)
colnames(summary_table)[4] <- "P-value"
# return the summary table
return(summary_table)
}
dsp.glmer <- function(model, nperm){
fam <- family(model)
form <- formula(model) # get the formula from the model
if(grepl("*",as.character(form)[[3]], fixed = T) | grepl(":",as.character(form)[[3]], fixed = T)){
stop("Model contains interaction effects; DSP cannot test these models")
}
data <- model@frame # get the data from the model
data <- cbind(data,rep(1,nrow(data))) # add an intercept column
colnames(data)[ncol(data)] <- "(Intercept)" # name the intercept column
fixed <- names(fixef(model)) #get the names of the fixed effects
rand <- names(ranef(model)) #names of the random effects
X <- data[,fixed,drop=F] # get the fixed predictors as a matrix
if(any(apply(X,2,class) == "factor")) stop("Fixed predictors must be numeric")
X <- as.matrix(X) # make the predictors a matrix
B <- data[,rand,drop=F] #get the random effect matrix
group.memb <- apply(B,1,function(z){
paste(z,collapse="-") # collapse all group memberships into a single character vector
})
all_groups <- unique(group.memb) # unique group memberships
if(length(all_groups) == nrow(data)){
stop("Number of unique random effect levels equal to number of observations")
}
Y <- data[,!colnames(data) %in% c(rand,fixed)] #get the responses
t.perm <- matrix(nrow = nperm, ncol = ncol(X)) #matrix to hold t values
for(j in 1:ncol(X)){
x <- X[,j] #get the jth predictor
z <- X[,-j] #get all other predictors
resid.x <- residuals(lm(x ~ -1 + z)) #get residuals
for(i in 1:nperm){ #for each permutation
for(k in 1:length(all_groups)){ # for each unique group
resid.x[group.memb == all_groups[k]] <- sample(resid.x[group.memb == all_groups[k]]) #shuffle the residuals in that group
}
data.perm <- data #copy original data
data.perm[,fixed[j]] <- resid.x #plug in residuals
if(fixed[j] == "(Intercept)"){ # if testing the intercept
colnames(data.perm)[colnames(data.perm) == fixed[j]] <- "Intercept" # get a nicer intercept
form.j <- update(form, ~ . + Intercept - 1) # update the formula
fit.perm <- lme4::glmer(form.j, data = data.perm, family = fam) # fit the permuted model
t.perm[i,j] <- summary(fit.perm)$coef["Intercept",3] #save t-value
}else{
fit.perm <- lme4::glmer(form, data = data.perm, family = fam) # fit the permuted model
t.perm[i,j] <- summary(fit.perm)$coef[j,3] # save the t-value
}
}
}
t.obs <- summary(model)$coef[,3] #observed t-value
# calculate p-values
pval <- sapply(1:length(t.obs), function(z){
p.gr <- mean(c(t.perm[,z],t.obs[z]) >= t.obs[z])
p.ls <- mean(c(t.perm[,z],t.obs[z]) <= t.obs[z])
min(c(p.gr,p.ls))*2
})
# make a summary table
summary_table <- summary(model)$coef
summary_table[,4] <- pval
colnames(summary_table)[4] <- "P-value"
# return the summary table
return(summary_table)
}
dsp.lm <- function(model, nperm){
form <- formula(model) # get the formula from the model
if(grepl("*",as.character(form)[[3]], fixed = T) | grepl(":",as.character(form)[[3]], fixed = T)){
stop("Model contains interaction effects; DSP cannot test these models")
}
data <- model.frame(model)
data <- cbind(data,rep(1,nrow(data))) # add an intercept column
colnames(data)[ncol(data)] <- "(Intercept)" # name the intercept column
fixed <- names(coef(model)) #get the names of the fixed effects
X <- data[,fixed,drop=F] # get the fixed predictors as a matrix
if(any(apply(X,2,class) == "factor")) stop("Fixed predictors must be numeric")
X <- as.matrix(X) # make the predictors a matrix
Y <- data[,!colnames(data) %in% fixed] #get the responses
t.perm <- matrix(nrow = nperm, ncol = ncol(X)) #matrix to hold t values
for(j in 1:ncol(X)){
x <- X[,j] #get the jth predictor
z <- X[,-j] #get all other predictors
resid.x <- residuals(lm(x ~ -1 + z)) #get residuals
for(i in 1:nperm){ #for each permutation
resid.x <- sample(resid.x) #shuffle the residuals in that group
data.perm <- data #copy original data
data.perm[,fixed[j]] <- resid.x #plug in residuals
if(fixed[j] == "(Intercept)"){ # if testing the intercept
colnames(data.perm)[colnames(data.perm) == fixed[j]] <- "Intercept" # get a nicer intercept
form.j <- update(form, ~ . + Intercept - 1) # update the formula
fit.perm <- lm(form.j, data = data.perm) # fit the permuted model
t.perm[i,j] <- summary(fit.perm)$coef["Intercept",3] #save t-value
}else{
fit.perm <- lm(form, data = data.perm) # fit the permuted model
t.perm[i,j] <- summary(fit.perm)$coef[j,3] # save the t-value
}
}
}
t.obs <- summary(model)$coef[,3] #observed t-value
# calculate p-values
pval <- sapply(1:length(t.obs), function(z){
p.gr <- mean(c(t.perm[,z],t.obs[z]) >= t.obs[z])
p.ls <- mean(c(t.perm[,z],t.obs[z]) <= t.obs[z])
min(c(p.gr,p.ls))*2
})
# make a summary table
summary_table <- summary(model)$coef
summary_table[,4] <- pval
colnames(summary_table)[4] <- "P-value"
# return the summary table
return(summary_table)
}
dsp.glm <- function(model, nperm){
form <- formula(model) # get the formula from the model
if(grepl("*",as.character(form)[[3]], fixed = T) | grepl(":",as.character(form)[[3]], fixed = T)){
stop("Model contains interaction effects; DSP cannot test these models")
}
data <- model.frame(model)
data <- cbind(data,rep(1,nrow(data))) # add an intercept column
colnames(data)[ncol(data)] <- "(Intercept)" # name the intercept column
fixed <- names(coef(model)) #get the names of the fixed effects
X <- data[,fixed,drop=F] # get the fixed predictors as a matrix
if(any(apply(X,2,class) == "factor")) stop("Fixed predictors must be numeric")
X <- as.matrix(X) # make the predictors a matrix
Y <- data[,!colnames(data) %in% fixed] #get the responses
t.perm <- matrix(nrow = nperm, ncol = ncol(X)) #matrix to hold t values
for(j in 1:ncol(X)){
x <- X[,j] #get the jth predictor
z <- X[,-j] #get all other predictors
resid.x <- residuals(lm(x ~ -1 + z)) #get residuals
for(i in 1:nperm){ #for each permutation
resid.x <- sample(resid.x) #shuffle the residuals in that group
data.perm <- data #copy original data
data.perm[,fixed[j]] <- resid.x #plug in residuals
if(fixed[j] == "(Intercept)"){ # if testing the intercept
colnames(data.perm)[colnames(data.perm) == fixed[j]] <- "Intercept" # get a nicer intercept
form.j <- update(form, ~ . + Intercept - 1) # update the formula
fit.perm <- lm(form.j, data = data.perm) # fit the permuted model
t.perm[i,j] <- summary(fit.perm)$coef["Intercept",3] #save t-value
}else{
fit.perm <- lm(form, data = data.perm) # fit the permuted model
t.perm[i,j] <- summary(fit.perm)$coef[j,3] # save the t-value
}
}
}
t.obs <- summary(model)$coef[,3] #observed t-value
# calculate p-values
pval <- sapply(1:length(t.obs), function(z){
p.gr <- mean(c(t.perm[,z],t.obs[z]) >= t.obs[z])
p.ls <- mean(c(t.perm[,z],t.obs[z]) <= t.obs[z])
min(c(p.gr,p.ls))*2
})
# make a summary table
summary_table <- summary(model)$coef
summary_table[,4] <- pval
colnames(summary_table)[4] <- "P-value"
# return the summary table
return(summary_table)
}
model_eigen <- lme4::lmer(log(contact_eigen) ~ age + sex, data = srkw_attributes)
model_eigen <- lme4::lmer(log(contact_eigen) ~ age + sex + (1|matriline), data = srkw_attributes)
double_semi_partialling(model_eigen, 1000)
contact_eigen
suppressWarnings(double_semi_partialling(model_eigen, 1000))
model_eigen <- lm(log(contact_eigen) ~ age + sex, data = srkw_attributes)
model_eigen <- lm(log(contact_eigen) ~ age + sex, data = srkw_attributes)
double_semi_partialling(model_eigen, 1000)
library(aninet)
?double_semi_partialling
library(aninet)
m1 <- latent_space(srkw_contact ~ 1, ind.RE = F)
m1 <- latent_space(srkw_contact ~ 1, ind.RE = F, effort = srkw_sampling)
plot(m1)
plot(m1)
plot(m1, post.method = "median")
plot(m1, post.method = "mean")
plot(m1, post.method = "mds")
plot(m1, post.method = "mds")
m1 <- latent_space(srkw_contact ~ 1, ind.RE = F, effort = srkw_sampling, adapt = 5000)
plot(m1, post.method = "mds")
plot(m1, post.method = "median")
plot(m1, post.method = "median")
plot(m1, post.method = "mean")
plot(m1, post.method = "median")
plot(m1, post.method = "mds")
library(aninet)
getwd()
library(aninet)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.which("make")
library(aninet)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "/.Renviron")
Sys.which("make")
library(aninet)
require(brms)
?brms::me
View(brms::me)
?deparse
?deparse_combine
View(deparse_combine)
View(brms::deparse_combine)
?substituteDirect
?substitute
View(brms::brm())
View(brms::brm)
?devtools::install_github
?library
