}
for(i in 1:N){
A[i,i] <- 1
}
}"
fit <- run.jags(hub_model,
data = data_list,
monitor = c("A","p"))
?igraph::modularity
?stats::cutree
network <- aninet::srkw_codetection
m <- network
graph = igraph::graph.adjacency(m, mode = "undirected", weighted = T)
graph
m.dist = stats::as.dist(1 - m)
clustering = stats::hclust(m.dist, method = method)
method = "average"
clustering = stats::hclust(m.dist, method = method)
cp = stats::cophenetic(clustering)
ccc = stats::cor(cp, m.dist)
membership <- stats::cutree(clustering, k = 1:ncol(m))
modularity <- apply(membership, 1, function(z){
igraph::modularity(graph, z, weights = E(graph)$weight)
})
modularity <- apply(membership, 1, function(z){
igraph::modularity(graph, z, weights = igraph::E(graph)$weight)
})
modularity
membership[,1]
membership[,2]
membership[,3]
membership[,4]
membership[,5]
membership[,6]
m <- network
graph = igraph::graph.adjacency(m, mode = "undirected", weighted = T)
m.dist = stats::as.dist(1 - m)
clustering = stats::hclust(m.dist, method = method)
cp = stats::cophenetic(clustering)
ccc = stats::cor(cp, m.dist)
membership <- stats::cutree(clustering, k = 1:ncol(m))
modularity <- apply(membership, 1, function(z){
igraph::modularity(graph, z, weights = igraph::E(graph)$weight)
})
modularity
best_clusters = stats::cutree(clustering, k = which.max(modularity))
height = 1 - cuts
m <- network
graph = igraph::graph.adjacency(m, mode = "undirected", weighted = T)
m.dist = stats::as.dist(1 - m)
clustering = stats::hclust(m.dist, method = method)
clustering$height <- round(clustering$height, 6)
cp = stats::cophenetic(clustering)
ccc = stats::cor(cp, m.dist)
cuts = clustering$height
cuts
plot(cuts)
modularity <- apply(membership, 1, function(z){
modularity(graph, membership = z, weights = igraph::E(g)$weight)
})
modularity <- apply(membership, 1, function(z){
igraph::modularity(graph, membership = z, weights = igraph::E(g)$weight)
})
modularity <- apply(membership, 1, function(z){
igraph::modularity(graph, membership = z, weights = igraph::E(graph)$weight)
})
modularity
plot(modularity)
association_hclust <- function(network, method = "average"){
m <- network
graph = igraph::graph.adjacency(m, mode = "undirected", weighted = T)
m.dist = stats::as.dist(1 - m)
clustering = stats::hclust(m.dist, method = method)
clustering$height <- round(clustering$height, 6)
cp = stats::cophenetic(clustering)
ccc = stats::cor(cp, m.dist)
cuts = clustering$height
cuts = unique(cuts)
membership <- cutree(clustering, h = cuts)
modularity <- apply(membership, 1, function(z){
igraph::modularity(graph, membership = z, weights = igraph::E(graph)$weight)
})
maximum_modularity = max(modularity)
best_clusters = stats::cutree(clustering, h = cuts[which.max(modularity)])
height = 1 - cuts
list(modularity = maximum_modularity, CCC = ccc, membership = best_clusters, tree = clustering, cuts = data.frame(AI = height, Mod = modularity), merge = clustering$merge)
}
attributes <- read.csv("D:/Datasets/clean attributes.csv")
attributes
n_females <- sapply(1976:2022, function(z){
sum(attributes$sex == 0 & attributes$yob <= (z - 9) & attributes$yob >= (z - 45) & (is.na(attributes$yod) | attributes$yod >= z))
})
n_females <- sapply(1976:2022, function(z){
ids <- attributes$id[attributes$sex == 0 & attributes$yob <= (z - 9) & attributes$yob >= (z - 45) & (is.na(attributes$yod) | attributes$yod >= z)]
has_son <- sapply(ids, function(y){
any(attributes$mother == y & !is.na(attributes$mother) & attributes$sex == 1 & attributes$yob < z)
})
sum(has_son)
})
n_females
n_females <- sapply(1976:2022, function(z){
sum(attributes$sex == 0 & attributes$yob <= (z - 9) & attributes$yob >= (z - 45) & (is.na(attributes$yod) | attributes$yod >= z))
})
n_with_son <- sapply(1976:2022, function(z){
ids <- attributes$id[attributes$sex == 0 & attributes$yob <= (z - 9) & attributes$yob >= (z - 45) & (is.na(attributes$yod) | attributes$yod >= z)]
has_son <- sapply(ids, function(y){
any(attributes$mother == y & !is.na(attributes$mother) & attributes$sex == 1 & attributes$yob < z)
})
sum(has_son)
})
plot(n_females)
plot(n_females, type = "l")
points(n_females-n_with_son, type = "l")
plot(n_females, type = "l", ylim = c(0,40))
points(n_females-n_with_son, type = "l")
plot((n_females-n_with_son)/n_females, type = "l")
plot((n_females-n_with_son)/n_females, type = "l", ylim = c(0,1))
plot((n_females-n_with_son)/n_females, type = "o", ylim = c(0,1))
plot((n_females-n_with_son)/n_females, type = "o", ylim = c(0,1), pch = 16)
require(brms)
?brms
?brms-family
?'brms-family'
?"brms-family"
?brmsfamily
?brms
data <- read.csv("D:/Datasets/clean attributes.csv")
data
data[data$mother == "L77",]
data[data$mother == "L77" & !is.na(data$mother),]
d <- sample(20,20,rep=T)
x <- rbinom(n = 20, size =d, prob = 0.2)
y <- rbinom(n = 20, size =d, prob = 0.2)
x <- rnorm920
x <- rnorm(20)
bf1 <- bf(formula = y ~ x, family = "binomial")
bf1 <- brm(formula = y ~ x, family = "binomial")
bf1 <- brm(formula = y ~ x, family = "binomial", data = data.frame(x = x, y = y))
gc()
?weights
bm1 <- brm(formula = y ~ x, data = data.frame(x = x, y = y))
posterior_epred(bm1)
pp <- posterior_epred(bm1)
bm1 <- brm(formula = y ~ x, data = data.frame(x = x, y = y))
pp <- posterior_epred(bm1)
dim(pp)
y
d
x
d <- matrix(data = sample(20, size = 10*10, rep = T), nrow = 10)
d
x <- matrix(data = rbinom(n = 10*10, size = d, prob = runif(10*10)))
x
x <- matrix(data = rbinom(n = 10*10, size = d, prob = runif(10*10)), nrow = 10)
x
x[upper.tri(x)] <- t(x)[upper.tri(x)]
diag(x) <- 0
d[upper.tri(d)] <- t(d)[upper.tri(d)]
diag(d) <- 0
d
x
z1 <- matrix(data = runif(10*10), nrow = 10)
z1[upper.tri(z1)] <- t(z1)[upper.tri(z1)]
diag(z1) <- 0
z2 <- matrix(data = runif(10*10), nrow = 10)
z2[upper.tri(z2)] <- t(z2)[upper.tri(z2)]
diag(z2) <- 0
z1
z2
formula <- x ~ z1 + z2
formula
weights = d
weights
?brmsfamily
fm <- formula
formula <- stats::model.frame(formula, na.action = NULL)
formula
i <- attr(attr(formula, "terms"), "response")
response <- as.matrix(formula[i])
x_names <- attr(attr(formula, "terms"), "term.labels")
response
x_names <- attr(attr(formula, "terms"), "term.labels")
x_names
predictors <- list()
for (i in 1:length(x_names)) {
predictors[[i]] <- as.matrix(formula[[x_names[i]]])
}
predictors[[1]]
predictors[[2]]
family
family <- "binomial"
(family == "binomial" | family == "zero_inflated_binomial") & any(!is.integer(response)) & is.null(weights)
names(predictors) <- x_names
predictors
y <- response[lower.tri(response)] #vectorized response
x <- do.call(cbind,lapply(predictors, function(z) z[lower.tri(z)])) #matrix of predictors
y
x
y
x <- as.data.frame(do.call(cbind,lapply(predictors, function(z) z[lower.tri(z)]))) #matrix of predictors
x
id1 <- sapply(1:nrow(response), function(z){
rep(z,nrow(response))
})
id2 <- t(id1)
id1
id2
df$id1 <- id1[lower.tri(id1)]
df$id2 <- id2[lower.tri(id2)]
df
y <- response[lower.tri(response)] #vectorized response
df <- as.data.frame(do.call(cbind,lapply(predictors, function(z) z[lower.tri(z)]))) #matrix of predictors
df$y <- y
df$id1 <- id1[lower.tri(id1)]
df$id2 <- id2[lower.tri(id2)]
df
is.null(offset)
offset
offset <- NULL
is.null(offset)
if(!is.null(weights)){
df$weight <- weights
}
weights
if(!is.null(weights)){
df$weight <- weights[lower.tri(weights)]
}
if(!is.null(offset)){
df$offset <- offset[lower.tri(offset)]
}
df
bf <- bf(y ~ . + (1|mm(id1,id2)))
bf
brm(bf, data = df)
gc()
i
response
formula <- stats::model.frame(formula, na.action = NULL)
formula
attr(attr(formula, "terms"), "response.label")
attr(attr(formula, "terms"), "response.labels")
attr(formula, "terms")
attr(formula, "variables")
attr(attr(formula, "terms"),"variables")
attr(attr(formula, "terms"),"variables")[[1]]
attr(attr(formula, "terms"),"variables")[[2]]
attr(attr(formula, "terms"),"variables")[[3]]
attr(attr(formula, "terms"),"variables")[[4]]
class(attr(attr(formula, "terms"),"variables")[[1]])
fm
allvars(fm)
all.vars(fm)
all.vars(fm)[1]
ttr(attr(formula, "terms"), "term.labels")
attr(attr(formula, "terms"), "term.labels")
colnames(df)[colnames(df) == "y"] <- all.vars(fm)[1]
df
fm <- update(fm, .~. + (1|mm(id1,id2)))
fm
if(famliy %in% c("binomial", "zero_inflated_binomial")) fm <- update(fm, .|trials(weight) ~ .)
if(family %in% c("binomial", "zero_inflated_binomial")) fm <- update(fm, .|trials(weight) ~ .)
fm
if(!family %in% c("binomial", "zero_inflated_binomial") & !is.null(weights)) fm <- update(fm, .|weights(weight) ~ .)
if(!is.null(offset)) fm <- update(fm, .~.+offset(offset))
fm
formula <- x ~ z1*z2
fm <- formula
formula <- stats::model.frame(formula, na.action = NULL)
i <- attr(attr(formula, "terms"), "response")
response <- as.matrix(formula[i])
x
response
x <- matrix(nrow = 10, ncol = 10)
x
x[lower.tri(x)] <- df$x
x[upper.tri(x)] <- t(x)[upper.tri(x)]
diag(x) <- 0
x
z
z1
z2
fm <- formula
formula <- stats::model.frame(formula, na.action = NULL)
i <- attr(attr(formula, "terms"), "response")
response <- as.matrix(formula[i])
response
x_names <- attr(attr(formula, "terms"), "term.labels")
x_names
predictors <- list()
for (i in 1:length(x_names)) {
predictors[[i]] <- as.matrix(formula[[x_names[i]]])
}
fm <- formula
formula <- stats::model.frame(formula, na.action = NULL)
formula
formula <- fm
formula
fm
formula <- x ~ z1 + z2
formula <- x ~ z1 * z2
fm <- formula
formula <- stats::model.frame(formula, na.action = NULL)
i <- attr(attr(formula, "terms"), "response")
response <- as.matrix(formula[i])
x_names <- attr(attr(formula, "terms"), "term.labels")
predictors <- list()
for (i in 1:length(x_names)) {
predictors[[i]] <- as.matrix(formula[[x_names[i]]])
}
x_names[[1]]
x_names[[2]]
x_names[[3]]
x_names
i
as.matrix(formula[[x_names[i]]])
formula[[x_names[[3]]]]
formula
all.vars(formula)
all.vars(fm)
x_names <- all.vars(fm)
predictors <- list()
for (i in 1:length(x_names)) {
predictors[[i]] <- as.matrix(formula[[x_names[i]]])
}
predictors
if(!all(unlist(lapply(predictors, function(z) nrow(z) == ncol(z) )))){
stop("Predictors must be square matrices")
}
if(nrow(response) != ncol(response)){
stop("Response must be a square matrix")
}
if(!all(unlist(lapply(predictors, function(z) nrow(z) == nrow(response) )))){
stop("Predictors and response must be of the same dimensions")
}
if((family == "binomial" | family == "zero_inflated_binomial") & any(!is.integer(response)) & is.null(weights)){
stop("Provide denominators as weights for binomial model")
}
if(!is.null(weights)){
if(!is.matrix(weights) | nrow(weights) != ncol(weights) | nrow(weights) != nrow(response)){
stop("Weights must be a square matrix with same dimensions as response")
}
}
if(!is.null(offset)){
if(!is.matrix(offset) | nrow(offset) != ncol(offset) | nrow(offset) != nrow(response)){
stop("Offsets must be a square matrix with same dimensions as response")
}
}
names(predictors) <- x_names
id1 <- sapply(1:nrow(response), function(z){
rep(z,nrow(response))
})
id2 <- t(id1)
y <- response[lower.tri(response)] #vectorized response
df <- as.data.frame(do.call(cbind,lapply(predictors, function(z) z[lower.tri(z)]))) #matrix of predictors
df$y <- y
colnames(df)[colnames(df) == "y"] <- all.vars(fm)[1]
df$id1 <- id1[lower.tri(id1)]
df$id2 <- id2[lower.tri(id2)]
df
fm
formual <- fm
fm <- formula
formula <- stats::model.frame(formula, na.action = NULL)
i <- attr(attr(formula, "terms"), "response")
response <- as.matrix(formula[i])
x_names <- all.vars(fm)[-1]
predictors <- list()
for (i in 1:length(x_names)) {
predictors[[i]] <- as.matrix(formula[[x_names[i]]])
}
if(!all(unlist(lapply(predictors, function(z) nrow(z) == ncol(z) )))){
stop("Predictors must be square matrices")
}
x_names
all.vars(fm)
fm
formula <- x ~ z1 * z2
fm <- formula
formula <- stats::model.frame(formula, na.action = NULL)
i <- attr(attr(formula, "terms"), "response")
response <- as.matrix(formula[i])
x_names <- all.vars(fm)[-1]
predictors <- list()
for (i in 1:length(x_names)) {
predictors[[i]] <- as.matrix(formula[[x_names[i]]])
}
if(!all(unlist(lapply(predictors, function(z) nrow(z) == ncol(z) )))){
stop("Predictors must be square matrices")
}
if(nrow(response) != ncol(response)){
stop("Response must be a square matrix")
}
if(!all(unlist(lapply(predictors, function(z) nrow(z) == nrow(response) )))){
stop("Predictors and response must be of the same dimensions")
}
if((family == "binomial" | family == "zero_inflated_binomial") & any(!is.integer(response)) & is.null(weights)){
stop("Provide denominators as weights for binomial model")
}
if(!is.null(weights)){
if(!is.matrix(weights) | nrow(weights) != ncol(weights) | nrow(weights) != nrow(response)){
stop("Weights must be a square matrix with same dimensions as response")
}
}
if(!is.null(offset)){
if(!is.matrix(offset) | nrow(offset) != ncol(offset) | nrow(offset) != nrow(response)){
stop("Offsets must be a square matrix with same dimensions as response")
}
}
names(predictors) <- x_names
id1 <- sapply(1:nrow(response), function(z){
rep(z,nrow(response))
})
formula <- x ~ z1 + z2
fm <- formula
formula <- stats::model.frame(formula, na.action = NULL)
var_names <- all.vars(fm)
for (i in 1:length(x_names)) {
predictors[[i]] <- as.matrix(formula[[x_names[i]]])
}
var_names <- all.vars(fm)
vars <- list()
for (i in 1:length(var_names)) {
vars[[i]] <- as.matrix(formula[[var_names[i]]])
}
vars
glm(x ~ z1 + z2, weights = d, family = binomial)
glm((x/d) ~ z1 + z2, weights = d, family = binomial)
x
d
df
glm(x ~ z1 + z2, weights = d, family = binomial, family = df)
glm(x ~ z1 + z2, weights = d, family = binomial, data = df)
glm(x ~ z1 + z2, weights = weight, family = binomial, data = df)
if(!is.null(weights)){
if(!is.matrix(weights) | nrow(weights) != ncol(weights) | nrow(weights) != nrow(response)){
stop("Weights must be a square matrix with same dimensions as response")
}
}
if(!is.null(offset)){
if(!is.matrix(offset) | nrow(offset) != ncol(offset) | nrow(offset) != nrow(response)){
stop("Offsets must be a square matrix with same dimensions as response")
}
}
names(predictors) <- x_names
id1 <- sapply(1:nrow(response), function(z){
rep(z,nrow(response))
})
id2 <- t(id1)
df <- as.data.frame(do.call(cbind,lapply(vars, function(z) z[lower.tri(z)]))) #matrix of predictors
df
colnames(df) <- var_names
df
df$id1 <- id1[lower.tri(id1)]
df$id2 <- id2[lower.tri(id2)]
if(!is.null(weights)){
df$weight <- weights[lower.tri(weights)]
}
if(!is.null(offset)){
df$offset <- offset[lower.tri(offset)]
}
glm(x ~ z1 + z2, weights = weight, family = binomial, data = df)
glm(x/weight ~ z1 + z2, weights = weight, family = binomial, data = df)
summary(glm(x/weight ~ z1 + z2, weights = weight, family = binomial, data = df))
?glmqap
?aninet::glmqap
z1
z2
plot(z1 ~ z2)
df
df$x/df$weight
brm(x/weight|trials(weight) ~ z1 + z2, data = df, family = binomial)
brm(x/weight|trials(weight) ~ z1 + z2, data = df, family = zero_inflated_binomial)
!is.integer(df[,1])
df[,1]
df$x
is.integer(df$x)
df$x %% 1
df$x %% 2
df$x %% 0.5
df$x %% 0
df$x %% 1
any(df[,1] %% 1 != 0)
any(df[,1] %% 1 != 0) & all(df[,1] <= 1 & df[,1] >= 0)
any(df[,1] %% 1 != 0)
all(df[,1] <= 1 & df[,1] >= 0)
var_names[1]
df[,var_names[1]]
binomial(link = "logit") == "binomial"
binomial(link = "logit")
class(binomial(link = "logit"))
is.family(binomial(link = "logit"))
class("binomial")
family <- binomial(link = "logit")
family
family$family
vars(x ~ z1 + s(z2))
all.vars(x ~ z1 + s(z2))
all.vars(x ~ z1 + (1|z2))
library(aninet)
library(aninet)
?dyadic_brm]
install.packages("roxygen2")
library(aninet)
usethis::use_testthat()
install.packages("devtools")
library(aninet)
?aninet::dyadic_brm
devtools::test()
rlang::last_error()
rlang::last_trace()
?testthat::test_dir
?usethis::use_testthat
